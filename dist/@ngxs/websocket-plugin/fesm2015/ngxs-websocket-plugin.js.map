{"version":3,"file":"ngxs-websocket-plugin.js","sources":["../../../../packages/websocket-plugin/src/symbols.ts","../../../../packages/websocket-plugin/src/websocket-handler.ts","../../../../packages/websocket-plugin/src/websocket.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const NGXS_WEBSOCKET_OPTIONS = new InjectionToken('NGXS_WEBSOCKET_OPTIONS');\n\nexport interface NgxsWebsocketPluginOptions {\n  /**\n   * URL of the websocket.\n   */\n  url?: string;\n\n  /**\n   * Either a single protocol string or an array of protocol strings.\n   * These strings are used to indicate sub-protocols, so that a single server\n   * can implement multiple WebSocket sub-protocols (for example, you might want one server to be able\n   * to handle different types of interactions depending on the specified protocol).\n   * If you don't specify a protocol string, an empty string is assumed.\n   */\n  protocol?: string | string[];\n\n  /**\n   * Sets the `binaryType` property of the underlying WebSocket.\n   */\n  binaryType?: 'blob' | 'arraybuffer';\n\n  /**\n   * The property name to distigunish this type for the store.\n   * Default: 'type'\n   */\n  typeKey?: string;\n\n  /**\n   * Interval to try and reconnect.\n   * Default: 5000\n   */\n  reconnectInterval?: number;\n\n  /**\n   * Number of reconnect attemps.\n   * Default: 10\n   */\n  reconnectAttempts?: number;\n\n  /**\n   * Serializer to call before sending messages\n   * Default: `json.stringify`\n   */\n  serializer?: (data: any) => string;\n\n  /**\n   * Deseralizer before publishing the message.\n   */\n  deserializer?: (e: MessageEvent) => any;\n}\n\nexport function noop(..._args: any[]) {\n  return function() {};\n}\n\n/**\n * Action to connect to the websocket. Optionally pass a URL.\n */\nexport class ConnectWebSocket {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[WebSocket] Connect';\n  }\n  constructor(public payload?: NgxsWebsocketPluginOptions) {}\n}\n\n/**\n * Action triggered when a error ocurrs\n */\nexport class WebsocketMessageError {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[WebSocket] Message Error';\n  }\n  constructor(public payload: any) {}\n}\n\n/**\n * Action to disconnect the websocket.\n */\nexport class DisconnectWebSocket {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[WebSocket] Disconnect';\n  }\n}\n\n/**\n * Action triggered when websocket is connected\n */\nexport class WebSocketConnected {\n  static get type() {\n    return '[WebSocket] Connected';\n  }\n}\n\n/**\n * Action triggered when websocket is disconnected\n */\nexport class WebSocketDisconnected {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[WebSocket] Disconnected';\n  }\n}\n\n/**\n * Action to send to the server.\n */\nexport class SendWebSocketMessage {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[WebSocket] Send Message';\n  }\n  constructor(public payload: any) {}\n}\n\n/**\n * Action dispatched when the user tries to connect if the connection already exists.\n */\nexport class WebSocketConnectionUpdated {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[WebSocket] Connection Updated';\n  }\n}\n\n/**\n * This error is thrown where there is no `type` (or custom `typeKey`) property\n * on the message that came from the server side socket\n */\nexport class TypeKeyPropertyMissingError extends Error {\n  constructor(typeKey: string) {\n    super(`Property ${typeKey} is missing on the socket message`);\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Actions, Store, getValue, ofActionDispatched } from '@ngxs/store';\n\nimport { WebSocketSubject, WebSocketSubjectConfig } from 'rxjs/webSocket';\n\nimport {\n  ConnectWebSocket,\n  DisconnectWebSocket,\n  SendWebSocketMessage,\n  NGXS_WEBSOCKET_OPTIONS,\n  NgxsWebsocketPluginOptions,\n  WebsocketMessageError,\n  WebSocketDisconnected,\n  TypeKeyPropertyMissingError,\n  WebSocketConnectionUpdated,\n  WebSocketConnected\n} from './symbols';\n\n@Injectable()\nexport class WebSocketHandler {\n  private socket: WebSocketSubject<any> | null = null;\n\n  private config: WebSocketSubjectConfig<any> = {\n    url: this.options.url!,\n    protocol: this.options.protocol,\n    // Default binary type is `blob` for the global `WebSocket`\n    binaryType: this.options.binaryType,\n    serializer: this.options.serializer,\n    deserializer: this.options.deserializer,\n    closeObserver: {\n      next: () => {\n        // ATTENTION!\n        // See https://github.com/ReactiveX/rxjs/blob/master/src/internal/observable/dom/WebSocketSubject.ts#L340\n        // RxJS socket emits `onComplete` event only if `event.wasClean` is truthy\n        // and doesn't complete socket subject if it's falsy\n        this.disconnect();\n      }\n    },\n    openObserver: {\n      next: () => this.store.dispatch(new WebSocketConnected())\n    }\n  };\n\n  private typeKey = this.options.typeKey!;\n\n  constructor(\n    private store: Store,\n    private actions$: Actions,\n    @Inject(NGXS_WEBSOCKET_OPTIONS) private options: NgxsWebsocketPluginOptions\n  ) {\n    this.setupActionsListeners();\n  }\n\n  private setupActionsListeners(): void {\n    this.actions$.pipe(ofActionDispatched(ConnectWebSocket)).subscribe(({ payload }) => {\n      this.connect(payload);\n    });\n\n    this.actions$.pipe(ofActionDispatched(DisconnectWebSocket)).subscribe(() => {\n      this.disconnect();\n    });\n\n    this.actions$.pipe(ofActionDispatched(SendWebSocketMessage)).subscribe(({ payload }) => {\n      this.send(payload);\n    });\n  }\n\n  private connect(options?: NgxsWebsocketPluginOptions): void {\n    this.updateConnection();\n\n    // Users can pass the options in the connect method so\n    // if options aren't available at DI bootstrap they have access\n    // to pass them here\n    if (options) {\n      this.mergeConfigWithOptions(options);\n    }\n\n    this.socket = new WebSocketSubject(this.config);\n\n    this.socket.subscribe({\n      next: (message: any) => {\n        const type = getValue(message, this.typeKey);\n        if (!type) {\n          throw new TypeKeyPropertyMissingError(this.typeKey);\n        }\n        this.store.dispatch({ ...message, type });\n      },\n      error: (error: any) => {\n        if (error instanceof CloseEvent) {\n          this.dispatchWebSocketDisconnected();\n        } else {\n          this.store.dispatch(new WebsocketMessageError(error));\n        }\n      }\n    });\n  }\n\n  private disconnect(): void {\n    if (this.socket) {\n      // `socket.complete()` closes the connection\n      // also it doesn't invoke the `onComplete` callback that we passed\n      // into `socket.subscribe(...)`\n      this.socket.complete();\n      this.socket = null;\n      this.dispatchWebSocketDisconnected();\n    }\n  }\n\n  private send(data: any): void {\n    if (!this.socket) {\n      throw new Error('You must connect to the socket before sending any data');\n    }\n\n    this.socket.next(data);\n  }\n\n  /**\n   * Don't enlarge the `connect` method\n   */\n  private mergeConfigWithOptions(options: NgxsWebsocketPluginOptions): void {\n    if (options.url) {\n      this.config.url = options.url;\n    }\n\n    if (options.serializer) {\n      this.config.serializer = options.serializer;\n    }\n\n    if (options.deserializer) {\n      this.config.deserializer = options.deserializer;\n    }\n  }\n\n  /**\n   * To ensure we don't have any memory leaks\n   * e.g. if the user occasionally dispatched `ConnectWebSocket` twice\n   * then the previous subscription will still live in the memory\n   * to prevent such behavior - we close the previous connection if it exists\n   */\n  private updateConnection(): void {\n    if (this.socket) {\n      this.socket.complete();\n      this.socket = null;\n      this.store.dispatch(new WebSocketConnectionUpdated());\n    }\n  }\n\n  /**\n   * Used in many places so it's better to move the code into function\n   */\n  private dispatchWebSocketDisconnected(): void {\n    this.store.dispatch(new WebSocketDisconnected());\n  }\n}\n","import { NgModule, ModuleWithProviders, APP_INITIALIZER, InjectionToken } from '@angular/core';\n\nimport { WebSocketHandler } from './websocket-handler';\nimport { NgxsWebsocketPluginOptions, NGXS_WEBSOCKET_OPTIONS, noop } from './symbols';\n\nexport function websocketOptionsFactory(options: NgxsWebsocketPluginOptions) {\n  return {\n    reconnectInterval: 5000,\n    reconnectAttempts: 10,\n    typeKey: 'type',\n    deserializer(e: MessageEvent) {\n      return JSON.parse(e.data);\n    },\n    serializer(value: any) {\n      return JSON.stringify(value);\n    },\n    ...options\n  };\n}\n\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\n\n@NgModule()\nexport class NgxsWebsocketPluginModule {\n  static forRoot(\n    options?: NgxsWebsocketPluginOptions\n  ): ModuleWithProviders<NgxsWebsocketPluginModule> {\n    return {\n      ngModule: NgxsWebsocketPluginModule,\n      providers: [\n        WebSocketHandler,\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_WEBSOCKET_OPTIONS,\n          useFactory: websocketOptionsFactory,\n          deps: [USER_OPTIONS]\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: noop,\n          deps: [WebSocketHandler],\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
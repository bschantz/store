{"version":3,"file":"ngxs-store-internals.js","sources":["../../../../packages/store/internals/src/memoize.ts","../../../../packages/store/internals/src/angular.ts","../../../../packages/store/internals/src/ngxs-bootstrapper.ts","../../../../packages/store/internals/src/initial-state.ts","../../../../packages/store/internals/src/internal-tokens.ts"],"sourcesContent":["function defaultEqualityCheck(a: any, b: any) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(\n  equalityCheck: (a: any, b: any) => boolean,\n  prev: IArguments | null,\n  next: IArguments | null\n) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  func: T,\n  equalityCheck = defaultEqualityCheck\n): T {\n  let lastArgs: IArguments | null = null;\n  let lastResult: any = null;\n  // we reference arguments instead of spreading them for performance reasons\n  function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = (<Function>func).apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  }\n  (<any>memoized).reset = function() {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n  return memoized as T;\n}\n","import { getPlatform, COMPILER_OPTIONS, CompilerOptions, PlatformRef } from '@angular/core';\nimport { memoize } from './memoize';\n\nfunction _isAngularInTestMode() {\n  const platformRef: PlatformRef | null = getPlatform();\n  if (!platformRef) return false;\n  const compilerOptions = platformRef.injector.get<any>(COMPILER_OPTIONS, null);\n  if (!compilerOptions) return false;\n  const isInTestMode = compilerOptions.some((item: CompilerOptions) => {\n    const providers = (item && item.providers) || [];\n    return providers.some((provider: any) => {\n      return (\n        (provider && provider.provide && provider.provide.name === 'MockNgModuleResolver') ||\n        false\n      );\n    });\n  });\n  return isInTestMode;\n}\n\nexport const isAngularInTestMode = memoize(_isAngularInTestMode);\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n@Injectable()\nexport class NgxsBootstrapper {\n  /**\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n   */\n  private bootstrap$ = new ReplaySubject<boolean>(1);\n\n  get appBootstrapped$(): Observable<boolean> {\n    return this.bootstrap$.asObservable();\n  }\n\n  /**\n   * This event will be emitted after attaching `ComponentRef` of the root component\n   * to the tree of views, that's a signal that application has been fully rendered\n   */\n  bootstrap(): void {\n    this.bootstrap$.next(true);\n    this.bootstrap$.complete();\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { PlainObject } from './symbols';\n\nexport const INITIAL_STATE_TOKEN = new InjectionToken<any>('INITIAL_STATE_TOKEN');\n\nexport class InitialState {\n  private static value: PlainObject = {};\n\n  public static set(state: PlainObject) {\n    this.value = state;\n  }\n\n  public static pop(): PlainObject {\n    const state: PlainObject = this.value;\n    this.value = {};\n    return state;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\n */\nexport const NGXS_STATE_CONTEXT_FACTORY: InjectionToken<any> = new InjectionToken(\n  'Internals.StateContextFactory'\n);\n\n/**\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\n */\nexport const NGXS_STATE_FACTORY: InjectionToken<any> = new InjectionToken(\n  'Internals.StateFactory'\n);\n"],"names":[],"mappings":"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"}
{"version":3,"file":"ngxs-store.js","sources":["../../../../packages/store/src/configs/messages.config.ts","../../../../packages/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","../../../../packages/store/src/symbols.ts","../../../../packages/store/src/execution/symbols.ts","../../../../packages/store/src/utils/utils.ts","../../../../packages/store/src/internal/internals.ts","../../../../packages/store/src/operators/of-action.ts","../../../../packages/store/src/operators/leave-ngxs.ts","../../../../packages/store/src/execution/internal-ngxs-execution-strategy.ts","../../../../packages/store/src/actions-stream.ts","../../../../packages/store/src/utils/compose.ts","../../../../packages/store/src/internal/state-stream.ts","../../../../packages/store/src/plugin-manager.ts","../../../../packages/store/src/internal/dispatcher.ts","../../../../packages/store/src/utils/freeze.ts","../../../../packages/store/src/host-environment/host-environment.ts","../../../../packages/store/src/internal/config-validator.ts","../../../../packages/store/src/internal/state-operations.ts","../../../../packages/store/src/internal/state-operators.ts","../../../../packages/store/src/internal/state-context-factory.ts","../../../../packages/store/src/utils/store-validators.ts","../../../../packages/store/src/internal/state-factory.ts","../../../../packages/store/src/internal/lifecycle-state-manager.ts","../../../../packages/store/src/utils/selector-utils.ts","../../../../packages/store/src/store.ts","../../../../packages/store/src/decorators/select/select-factory.ts","../../../../packages/store/src/actions/actions.ts","../../../../packages/store/src/ivy/ivy-enabled-in-dev-mode.ts","../../../../packages/store/src/modules/ngxs-root.module.ts","../../../../packages/store/src/modules/ngxs-feature.module.ts","../../../../packages/store/src/module.ts","../../../../packages/store/src/decorators/action.ts","../../../../packages/store/src/ivy/ensure-state-class-is-injectable.ts","../../../../packages/store/src/decorators/state.ts","../../../../packages/store/src/decorators/select/symbols.ts","../../../../packages/store/src/decorators/select/select.ts","../../../../packages/store/src/decorators/selector-options.ts","../../../../packages/store/src/public_to_deprecate.ts","../../../../packages/store/src/decorators/selector/selector.ts","../../../../packages/store/src/execution/noop-ngxs-execution-strategy.ts","../../../../packages/store/src/state-token/state-token.ts"],"sourcesContent":["export enum VALIDATION_CODE {\n  STATE_NAME = 'STATE_NAME',\n  STATE_UNIQUE = 'STATE_UNIQUE',\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\n  STATE_DECORATOR = 'STATE_DECORATOR',\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR',\n  ZONE_WARNING = 'ZONE_WARNING',\n  PATCHING_ARRAY = 'PATCHING_ARRAY',\n  PATCHING_PRIMITIVE = 'PATCHING_PRIMITIVE',\n  UNDECORATED_STATE_IN_IVY = 'UNDECORATED_STATE_IN_IVY'\n}\n\nexport const CONFIG_MESSAGES = {\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\n    'You have forgotten to import the NGXS module!',\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\n    '@Action() decorator cannot be used with static methods',\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods',\n  [VALIDATION_CODE.ZONE_WARNING]: () =>\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })',\n  [VALIDATION_CODE.PATCHING_ARRAY]: () => 'Patching arrays is not supported.',\n  [VALIDATION_CODE.PATCHING_PRIMITIVE]: () => 'Patching primitives is not supported.',\n  [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (name: string) =>\n    `'${name}' class should be decorated with @Injectable() right after the @State() decorator`\n};\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { NgxsExecutionStrategy } from './symbols';\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\n\n@Injectable()\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\n    this.verifyZoneIsNotNooped(this._ngZone);\n  }\n\n  enter<T>(func: () => T): T {\n    if (isPlatformServer(this._platformId)) {\n      return this.runInsideAngular(func);\n    }\n    return this.runOutsideAngular(func);\n  }\n\n  leave<T>(func: () => T): T {\n    return this.runInsideAngular(func);\n  }\n\n  private runInsideAngular<T>(func: () => T): T {\n    if (NgZone.isInAngularZone()) {\n      return func();\n    }\n    return this._ngZone.run(func);\n  }\n\n  private runOutsideAngular<T>(func: () => T): T {\n    if (NgZone.isInAngularZone()) {\n      return this._ngZone.runOutsideAngular(func);\n    }\n    return func();\n  }\n\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\n    // to be used outside of the core Angular code, thus we just have\n    // to check if the zone doesn't extend or instanceof `NgZone`\n    if (ngZone instanceof NgZone) {\n      return;\n    }\n\n    console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\n  }\n}\n","import { Injectable, InjectionToken, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\nimport { SharedSelectorOptions, Callback } from './internal/internals';\nimport { NgxsExecutionStrategy } from './execution/symbols';\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\nimport { StateToken } from './state-token/state-token';\n\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\nexport const NG_TEST_MODE = new InjectionToken<Callback<boolean>>('NG_TEST_MODE');\nexport const NG_DEV_MODE = new InjectionToken<Callback<boolean>>('NG_DEV_MODE');\n\nexport const META_KEY = 'NGXS_META';\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\n\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\n  Partial<NgxsOnInit> &\n  Partial<NgxsAfterBootstrap>;\n\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\n\n/**\n * The NGXS config settings.\n */\n@Injectable()\nexport class NgxsConfig {\n  /**\n   * Run in development mode. This will add additional debugging features:\n   * - Object.freeze on the state and actions to guarantee immutability\n   * (default: false)\n   */\n  developmentMode: boolean;\n  compatibility: {\n    /**\n     * Support a strict Content Security Policy.\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\n     * (default: false)\n     */\n    strictContentSecurityPolicy: boolean;\n  };\n  /**\n   * Determines the execution context to perform async operations inside. An implementation can be\n   * provided to override the default behaviour where the async operations are run\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\n   * These observable behaviours are from:\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\n   * application doesn't rely on zone.js running change detection then you can switch to the\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\n   * (default: null)\n   */\n  executionStrategy: Type<NgxsExecutionStrategy>;\n  /**\n   * Defining the default state before module initialization\n   * This is convenient if we need to create a define our own set of states.\n   * @deprecated will be removed after v4\n   * (default: {})\n   */\n  defaultsState: PlainObject = {};\n  /**\n   * Defining shared selector options\n   */\n  selectorOptions: SharedSelectorOptions = {\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\n    suppressErrors: true // TODO: default is true in v3, will change in v4\n  };\n\n  constructor() {\n    this.compatibility = {\n      strictContentSecurityPolicy: false\n    };\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\n  }\n}\n\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\n\n/**\n * State context provided to the actions in the state.\n */\nexport interface StateContext<T> {\n  /**\n   * Get the current state.\n   */\n  getState(): T;\n\n  /**\n   * Reset the state to a new value.\n   */\n  setState(val: T | StateOperator<T>): T;\n\n  /**\n   * Patch the existing state with the provided value.\n   */\n  patchState(val: Partial<T>): T;\n\n  /**\n   * Dispatch a new action and return the dispatched observable.\n   */\n  dispatch(actions: any | any[]): Observable<void>;\n}\n\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\n\n/**\n * Plugin interface\n */\nexport interface NgxsPlugin {\n  /**\n   * Handle the state/action before its submitted to the state handlers.\n   */\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\n}\n\n/**\n * Options that can be provided to the store.\n */\nexport interface StoreOptions<T> {\n  /**\n   * Name of the state. Required.\n   */\n  name: string | StateToken<T>;\n\n  /**\n   * Default values for the state. If not provided, uses empty object.\n   */\n  defaults?: T;\n\n  /**\n   * Sub states for the given state.\n   */\n  children?: StateClass[];\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single state instance.\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\n */\nexport class NgxsSimpleChange<T = any> {\n  constructor(\n    public readonly previousValue: T,\n    public readonly currentValue: T,\n    public readonly firstChange: boolean\n  ) {}\n}\n\n/**\n * On init interface\n */\nexport interface NgxsOnInit {\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\n}\n\n/**\n * On change interface\n */\nexport interface NgxsOnChanges {\n  ngxsOnChanges(change: NgxsSimpleChange): void;\n}\n\n/**\n * After bootstrap interface\n */\nexport interface NgxsAfterBootstrap {\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\n}\n\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\n","import { InjectionToken } from '@angular/core';\n\n/*\n * Internal execution strategy injection token\n */\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\n  'NGXS_EXECUTION_STRATEGY'\n);\n\n/*\n * Execution strategy interface\n */\nexport interface NgxsExecutionStrategy {\n  enter<T>(func: () => T): T;\n  leave<T>(func: () => T): T;\n}\n","/**\n * Returns the type from an action instance/class.\n * @ignore\n */\nexport function getActionTypeFromInstance(action: any): string | undefined {\n  if (action.constructor && action.constructor.type) {\n    return action.constructor.type;\n  } else {\n    return action.type;\n  }\n}\n\n/**\n * Matches a action\n * @ignore\n */\nexport function actionMatcher(action1: any) {\n  const type1 = getActionTypeFromInstance(action1);\n\n  return function(action2: any) {\n    return type1 === getActionTypeFromInstance(action2);\n  };\n}\n\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n */\nexport const setValue = (obj: any, prop: string, val: any) => {\n  obj = { ...obj };\n\n  const split = prop.split('.');\n  const lastIndex = split.length - 1;\n\n  split.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n};\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nexport const getValue = (obj: any, prop: string): any =>\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\nimport { Observable } from 'rxjs';\n\nimport {\n  META_KEY,\n  META_OPTIONS_KEY,\n  NgxsConfig,\n  NgxsSimpleChange,\n  SELECTOR_META_KEY,\n  StoreOptions\n} from '../symbols';\nimport { ActionHandlerMetaData } from '../actions/symbols';\nimport { getValue } from '../utils/utils';\n\n// inspired from https://stackoverflow.com/a/43674389\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\n  [META_KEY]?: MetaDataModel;\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\n}\n\nexport type StateKeyGraph = PlainObjectOf<string[]>;\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\n\nexport interface StateOperations<T> {\n  getState(): T;\n\n  setState(val: T): T;\n\n  dispatch(actionOrActions: any | any[]): Observable<void>;\n}\n\nexport interface MetaDataModel {\n  name: string | null;\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\n  defaults: any;\n  path: string | null;\n  makeRootSelector: SelectorFactory | null;\n  children?: StateClassInternal[];\n}\n\nexport interface RuntimeSelectorContext {\n  getStateGetter(key: any): (state: any) => any;\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\n}\n\nexport type SelectFromRootState = (rootState: any) => any;\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\n\nexport interface SharedSelectorOptions {\n  injectContainerState?: boolean;\n  suppressErrors?: boolean;\n}\n\nexport interface SelectorMetaDataModel {\n  makeRootSelector: SelectorFactory | null;\n  originalFn: Function | null;\n  containerClass: any;\n  selectorName: string | null;\n  getSelectorOptions: () => SharedSelectorOptions;\n}\n\nexport interface MappedStore {\n  name: string;\n  isInitialised: boolean;\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\n  defaults: any;\n  instance: any;\n  path: string;\n}\n\nexport interface StatesAndDefaults {\n  defaults: any;\n  states: MappedStore[];\n}\n\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\n\nexport interface RootStateDiff<T> {\n  currentAppState: T;\n  newAppState: T;\n}\n\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n */\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata: MetaDataModel = {\n      name: null,\n      actions: {},\n      defaults: {},\n      path: null,\n      makeRootSelector(context: RuntimeSelectorContext) {\n        return context.getStateGetter(defaultMetadata.name);\n      },\n      children: []\n    };\n\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n  }\n  return getStoreMetadata(target);\n}\n\n/**\n * Get the metadata attached to the state class if it exists.\n *\n * @ignore\n */\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\n  return target[META_KEY]!;\n}\n\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n */\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\n    const defaultMetadata: SelectorMetaDataModel = {\n      makeRootSelector: null,\n      originalFn: null,\n      containerClass: null,\n      selectorName: null,\n      getSelectorOptions: () => ({})\n    };\n\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\n  }\n\n  return getSelectorMetadata(target);\n}\n\n/**\n * Get the metadata attached to the selector if it exists.\n *\n * @ignore\n */\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\n  return target[SELECTOR_META_KEY];\n}\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\n *\n * @ignore\n */\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\n  const copyOfPaths = paths.slice();\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\n}\n\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n */\nfunction fastPropGetter(paths: string[]): (x: any) => any {\n  const segments = paths;\n  let seg = 'store.' + segments[0];\n  let i = 0;\n  const l = segments.length;\n\n  let expr = seg;\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n\n  const fn = new Function('store', 'return ' + expr + ';');\n\n  return <(x: any) => any>fn;\n}\n\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nexport function propGetter(paths: string[], config: NgxsConfig) {\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\n    return compliantPropGetter(paths);\n  } else {\n    return fastPropGetter(paths);\n  }\n}\n\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n */\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\n  const findName = (stateClass: StateClassInternal) => {\n    const meta = stateClasses.find(g => g === stateClass);\n    if (!meta) {\n      throw new Error(\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\n      );\n    }\n\n    return meta[META_KEY]!.name!;\n  };\n\n  return stateClasses.reduce<StateKeyGraph>(\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\n      const { name, children } = stateClass[META_KEY]!;\n      result[name!] = (children || []).map(findName);\n      return result;\n    },\n    {}\n  );\n}\n\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n */\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\n      const meta = stateClass[META_KEY]!;\n      result[meta.name!] = stateClass;\n      return result;\n    },\n    {}\n  );\n}\n\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n */\nexport function findFullParentPath(\n  obj: StateKeyGraph,\n  newObj: PlainObjectOf<string> = {}\n): PlainObjectOf<string> {\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\n    for (const key in child) {\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n        const parent = visit(child, key);\n        return parent !== null ? `${parent}.${key}` : key;\n      }\n    }\n    return null;\n  };\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const parent = visit(obj, key);\n      newObj[key] = parent ? `${parent}.${key}` : key;\n    }\n  }\n\n  return newObj;\n}\n\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n */\nexport function topologicalSort(graph: StateKeyGraph): string[] {\n  const sorted: string[] = [];\n  const visited: PlainObjectOf<boolean> = {};\n\n  const visit = (name: string, ancestors: string[] = []) => {\n    if (!Array.isArray(ancestors)) {\n      ancestors = [];\n    }\n\n    ancestors.push(name);\n    visited[name] = true;\n\n    graph[name].forEach((dep: string) => {\n      if (ancestors.indexOf(dep) >= 0) {\n        throw new Error(\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\n        );\n      }\n\n      if (visited[dep]) {\n        return;\n      }\n\n      visit(dep, ancestors.slice(0));\n    });\n\n    if (sorted.indexOf(name) < 0) {\n      sorted.push(name);\n    }\n  };\n\n  Object.keys(graph).forEach(k => visit(k));\n\n  return sorted.reverse();\n}\n\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n */\nexport function isObject(obj: any) {\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\n}\n\nexport function getStateDiffChanges<T>(\n  mappedStore: MappedStore,\n  diff: RootStateDiff<T>\n): NgxsSimpleChange {\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\n}\n","import { OperatorFunction, Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ActionType } from '../actions/symbols';\nimport { getActionTypeFromInstance } from '../utils/utils';\nimport { ActionContext, ActionStatus } from '../actions-stream';\n\nexport interface ActionCompletion<T = any, E = Error> {\n  action: T;\n  result: {\n    successful: boolean;\n    canceled: boolean;\n    error?: E;\n  };\n}\n\nexport function ofAction<T = any>(allowedType: ActionType): OperatorFunction<ActionContext, T>;\nexport function ofAction<T = any>(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, T>;\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n */\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n */\nexport function ofActionDispatched(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n */\nexport function ofActionSuccessful(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n */\nexport function ofActionCanceled(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been completed\n */\nexport function ofActionCompleted(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, ActionCompletion> {\n  const allowedStatuses = [\n    ActionStatus.Successful,\n    ActionStatus.Canceled,\n    ActionStatus.Errored\n  ];\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n */\nexport function ofActionErrored(\n  ...allowedTypes: ActionType[]\n): OperatorFunction<ActionContext, any> {\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\n}\n\nfunction ofActionOperator(\n  allowedTypes: ActionType[],\n  statuses?: ActionStatus[],\n  // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\n  // since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\n  // defaults to `any`, thus there is no sense from union type.\n  mapOperator: () => OperatorFunction<ActionContext, any> = mapAction\n): OperatorFunction<ActionContext, any> {\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\n  return function(o: Observable<ActionContext>) {\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\n  };\n}\n\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\n  return filter((ctx: ActionContext) => {\n    const actionType = getActionTypeFromInstance(ctx.action)!;\n    const typeMatch = allowedTypes[actionType];\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\n    return typeMatch && statusMatch;\n  });\n}\n\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\n  return map(({ action, status, error }: ActionContext) => {\n    return <ActionCompletion>{\n      action,\n      result: {\n        successful: ActionStatus.Successful === status,\n        canceled: ActionStatus.Canceled === status,\n        error\n      }\n    };\n  });\n}\n\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\n  return map((ctx: ActionContext) => <T>ctx.action);\n}\n\ninterface FilterMap {\n  [key: string]: boolean;\n}\n\nfunction createAllowedActionTypesMap(types: ActionType[]): FilterMap {\n  return types.reduce((filterMap: FilterMap, klass: any) => {\n    filterMap[getActionTypeFromInstance(klass)!] = true;\n    return filterMap;\n  }, <FilterMap>{});\n}\n\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\n  return statuses.reduce((filterMap: FilterMap, status: ActionStatus) => {\n    filterMap[status] = true;\n    return filterMap;\n  }, <FilterMap>{});\n}\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\nimport { NgxsExecutionStrategy } from '../execution/symbols';\n\n/**\n * Returns operator that will run\n * `subscribe` outside of the ngxs execution context\n */\nexport function leaveNgxs<T>(\n  ngxsExecutionStrategy: NgxsExecutionStrategy\n): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    return new Observable((sink: Observer<T>) => {\n      return source.subscribe({\n        next(value) {\n          ngxsExecutionStrategy.leave(() => sink.next(value));\n        },\n        error(error) {\n          ngxsExecutionStrategy.leave(() => sink.error(error));\n        },\n        complete() {\n          ngxsExecutionStrategy.leave(() => sink.complete());\n        }\n      });\n    });\n  };\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\n\n@Injectable()\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\n  constructor(\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\n  ) {}\n\n  enter<T>(func: () => T): T {\n    return this._executionStrategy.enter(func);\n  }\n\n  leave<T>(func: () => T): T {\n    return this._executionStrategy.leave(func);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nimport { leaveNgxs } from './operators/leave-ngxs';\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\n\n/**\n * Status of a dispatched action\n */\nexport const enum ActionStatus {\n  Dispatched = 'DISPATCHED',\n  Successful = 'SUCCESSFUL',\n  Canceled = 'CANCELED',\n  Errored = 'ERRORED'\n}\n\nexport interface ActionContext<T = any> {\n  status: ActionStatus;\n  action: T;\n  error?: Error;\n}\n\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nexport class OrderedSubject<T> extends Subject<T> {\n  private _itemQueue: T[] = [];\n  private _busyPushingNext = false;\n\n  next(value?: T): void {\n    if (this._busyPushingNext) {\n      this._itemQueue.unshift(value!);\n      return;\n    }\n    this._busyPushingNext = true;\n    super.next(value);\n    while (this._itemQueue.length > 0) {\n      const nextValue = this._itemQueue.pop();\n      super.next(nextValue);\n    }\n    this._busyPushingNext = false;\n  }\n}\n\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\n@Injectable()\nexport class InternalActions extends OrderedSubject<ActionContext> {}\n\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\n@Injectable()\nexport class Actions extends Observable<any> {\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\n  constructor(\n    internalActions$: InternalActions,\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\n  ) {\n    super(observer => {\n      const childSubscription = internalActions$\n        .pipe(leaveNgxs(internalExecutionStrategy))\n        .subscribe({\n          next: ctx => observer.next(ctx),\n          error: error => observer.error(error),\n          complete: () => observer.complete()\n        });\n\n      observer.add(childSubscription);\n    });\n  }\n}\n","export type StateFn = (...args: any[]) => any;\n\n/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n */\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\n  const curr = funcs.shift()!;\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\n};\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { PlainObject } from '@ngxs/store/internals';\n\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\n@Injectable()\nexport class StateStream extends BehaviorSubject<PlainObject> {\n  constructor() {\n    super({});\n  }\n}\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\n\n@Injectable()\nexport class PluginManager {\n  public plugins: NgxsPluginFn[] = [];\n\n  constructor(\n    @Optional()\n    @SkipSelf()\n    private _parentManager: PluginManager,\n    @Inject(NGXS_PLUGINS)\n    @Optional()\n    private _pluginHandlers: NgxsPlugin[]\n  ) {\n    this.registerHandlers();\n  }\n\n  private get rootPlugins(): NgxsPluginFn[] {\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\n  }\n\n  private registerHandlers(): void {\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\n    this.rootPlugins.push(...pluginHandlers);\n  }\n\n  private getPluginHandlers(): NgxsPluginFn[] {\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\n    return handlers.map(\n      (plugin: NgxsPlugin) =>\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\n    );\n  }\n}\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\n\nimport { compose } from '../utils/compose';\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\nimport { StateStream } from './state-stream';\nimport { PluginManager } from '../plugin-manager';\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\nimport { leaveNgxs } from '../operators/leave-ngxs';\nimport { getActionTypeFromInstance } from '../utils/utils';\n\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\n@Injectable()\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\n\n@Injectable()\nexport class InternalDispatcher {\n  constructor(\n    private _errorHandler: ErrorHandler,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _pluginManager: PluginManager,\n    private _stateStream: StateStream,\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\n  ) {}\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(actionOrActions: any | any[]): Observable<any> {\n    const result = this._ngxsExecutionStrategy.enter(() =>\n      this.dispatchByEvents(actionOrActions)\n    );\n\n    result.subscribe({\n      error: error =>\n        this._ngxsExecutionStrategy.leave(() => {\n          try {\n            this._errorHandler.handleError(error);\n          } catch {}\n        })\n    });\n\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\n  }\n\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\n    if (Array.isArray(actionOrActions)) {\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\n    } else {\n      return this.dispatchSingle(actionOrActions);\n    }\n  }\n\n  private dispatchSingle(action: any): Observable<any> {\n    const type: string | undefined = getActionTypeFromInstance(action);\n    if (!type) {\n      const error = new Error(\n        `This action doesn't have a type property: ${action.constructor.name}`\n      );\n      return throwError(error);\n    }\n\n    const prevState = this._stateStream.getValue();\n    const plugins = this._pluginManager.plugins;\n\n    return (compose([\n      ...plugins,\n      (nextState: any, nextAction: any) => {\n        if (nextState !== prevState) {\n          this._stateStream.next(nextState);\n        }\n        const actionResult$ = this.getActionResultStream(nextAction);\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\n        return this.createDispatchObservable(actionResult$);\n      }\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\n  }\n\n  private getActionResultStream(action: any): Observable<ActionContext> {\n    return this._actionResults.pipe(\n      filter(\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\n      ),\n      take(1),\n      shareReplay()\n    );\n  }\n\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\n    return actionResult$\n      .pipe(\n        exhaustMap((ctx: ActionContext) => {\n          switch (ctx.status) {\n            case ActionStatus.Successful:\n              return of(this._stateStream.getValue());\n            case ActionStatus.Errored:\n              return throwError(ctx.error);\n            default:\n              return EMPTY;\n          }\n        })\n      )\n      .pipe(shareReplay());\n  }\n}\n","/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n */\nexport const deepFreeze = (o: any) => {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n};\n","import { Inject, Injectable } from '@angular/core';\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\nimport { Callback } from '../internal/internals';\n\n@Injectable()\nexport class HostEnvironment {\n  constructor(\n    @Inject(NG_DEV_MODE) public isDevMode: Callback<boolean>,\n    @Inject(NG_TEST_MODE) public isTestMode: Callback<boolean>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\nimport {\n  CONFIG_MESSAGES as MESSAGES,\n  VALIDATION_CODE as CODE\n} from '../configs/messages.config';\nimport { NgxsConfig } from '../symbols';\nimport { HostEnvironment } from '../host-environment/host-environment';\n\n@Injectable()\nexport class ConfigValidator {\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\n\n  private get isIncorrectProduction(): boolean {\n    return !this._host.isDevMode() && this._config.developmentMode;\n  }\n\n  private get isIncorrectDevelopment(): boolean {\n    return this._host.isDevMode() && !this._config.developmentMode;\n  }\n\n  public verifyDevMode(): void {\n    if (this._host.isTestMode()) {\n      return;\n    }\n\n    if (this.isIncorrectProduction) {\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\n    } else if (this.isIncorrectDevelopment) {\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\nimport { InternalDispatcher } from '../internal/dispatcher';\nimport { StateStream } from './state-stream';\nimport { NgxsConfig } from '../symbols';\nimport { deepFreeze } from '../utils/freeze';\nimport { ConfigValidator } from '../internal/config-validator';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class InternalStateOperations {\n  constructor(\n    private _stateStream: StateStream,\n    private _dispatcher: InternalDispatcher,\n    private _config: NgxsConfig,\n    configValidator: ConfigValidator\n  ) {\n    configValidator.verifyDevMode();\n  }\n\n  /**\n   * Returns the root state operators.\n   */\n  getRootStateOperations(): StateOperations<any> {\n    const rootStateOperations = {\n      getState: () => this._stateStream.getValue(),\n      setState: (newState: any) => this._stateStream.next(newState),\n      dispatch: (actionOrActions: any | any[]) => this._dispatcher.dispatch(actionOrActions)\n    };\n\n    if (this._config.developmentMode) {\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\n    }\n\n    return rootStateOperations;\n  }\n\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\n    return {\n      getState: () => root.getState(),\n      setState: value => {\n        const frozenValue = deepFreeze(value);\n        return root.setState(frozenValue);\n      },\n      dispatch: actions => {\n        return root.dispatch(actions);\n      }\n    };\n  }\n\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\n\n    // Get our current stream\n    const currentState = stateOperations.getState();\n    // Set the state to the current + new\n    stateOperations.setState({ ...currentState, ...results.defaults });\n  }\n}\n","import {\n  CONFIG_MESSAGES as MESSAGES,\n  VALIDATION_CODE as CODE\n} from '../configs/messages.config';\nimport { StateOperator } from '../symbols';\n\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\n  return (existingState: Readonly<T>) => {\n    if (Array.isArray(val)) {\n      throw new Error(MESSAGES[CODE.PATCHING_ARRAY]());\n    } else if (typeof val !== 'object') {\n      throw new Error(MESSAGES[CODE.PATCHING_PRIMITIVE]());\n    }\n\n    const newState: any = { ...(existingState as any) };\n    for (const key in val) {\n      // deep clone for patch compatibility\n      // noinspection JSUnfilteredForInLoop (IDE)\n      newState[key] = (val as any)[key];\n    }\n\n    return newState as T;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\nimport { setValue, getValue } from '../utils/utils';\nimport { InternalStateOperations } from '../internal/state-operations';\nimport { simplePatch } from './state-operators';\n\n/**\n * State Context factory class\n * @ignore\n */\n@Injectable()\nexport class StateContextFactory {\n  constructor(private _internalStateOperations: InternalStateOperations) {}\n\n  /**\n   * Create the state context\n   */\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\n    const root = this._internalStateOperations.getRootStateOperations();\n\n    function getState(currentAppState: any): T {\n      return getValue(currentAppState, mappedStore.path);\n    }\n\n    function setStateValue(currentAppState: any, newValue: T): any {\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\n      const instance: NgxsLifeCycle = mappedStore.instance;\n\n      if (instance.ngxsOnChanges) {\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\n          currentAppState,\n          newAppState\n        });\n\n        instance.ngxsOnChanges(change);\n      }\n\n      root.setState(newAppState);\n      return newAppState;\n      // In doing this refactoring I noticed that there is a 'bug' where the\n      // application state is returned instead of this state slice.\n      // This has worked this way since the beginning see:\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\n      // This needs to be fixed, but is a 'breaking' change.\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\n    }\n\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\n      const local = getState(currentAppState);\n      const newValue = stateOperator(local);\n      return setStateValue(currentAppState, newValue);\n    }\n\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\n      return typeof value === 'function';\n    }\n\n    return {\n      getState(): T {\n        const currentAppState = root.getState();\n        return getState(currentAppState);\n      },\n      patchState(val: Partial<T>): T {\n        const currentAppState = root.getState();\n        const patchOperator = simplePatch<T>(val);\n        return setStateFromOperator(currentAppState, patchOperator);\n      },\n      setState(val: T | StateOperator<T>): T {\n        const currentAppState = root.getState();\n        return isStateOperator(val)\n          ? setStateFromOperator(currentAppState, val)\n          : setStateValue(currentAppState, val);\n      },\n      dispatch(actions: any | any[]): Observable<void> {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n","import {\n  getStoreMetadata,\n  MetaDataModel,\n  StateClassInternal,\n  StatesByName\n} from '../internal/internals';\nimport {\n  CONFIG_MESSAGES as MESSAGES,\n  VALIDATION_CODE as CODE\n} from '../configs/messages.config';\n\nexport abstract class StoreValidators {\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\n\n  public static stateNameErrorMessage(name: string) {\n    return MESSAGES[CODE.STATE_NAME](name);\n  }\n\n  public static checkCorrectStateName(name: string | null) {\n    if (!name) {\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\n    }\n\n    if (!this.stateNameRegex.test(name)) {\n      throw new Error(this.stateNameErrorMessage(name));\n    }\n  }\n\n  public static checkStateNameIsUnique(\n    state: StateClassInternal,\n    statesByName: StatesByName\n  ): string {\n    const meta: MetaDataModel = this.getValidStateMeta(state);\n    const stateName: string = meta!.name as string;\n    const existingState = statesByName[stateName];\n    if (existingState && existingState !== state) {\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\n    }\n    return stateName;\n  }\n\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\n    const meta: MetaDataModel = getStoreMetadata(state);\n    if (!meta) {\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\n    }\n\n    return meta;\n  }\n}\n","import { Injectable, Injector, Optional, SkipSelf, Inject } from '@angular/core';\nimport { forkJoin, from, Observable, of, throwError } from 'rxjs';\nimport {\n  catchError,\n  defaultIfEmpty,\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  takeUntil\n} from 'rxjs/operators';\n\nimport { META_KEY, NgxsConfig } from '../symbols';\nimport {\n  buildGraph,\n  findFullParentPath,\n  isObject,\n  MappedStore,\n  MetaDataModel,\n  nameToState,\n  propGetter,\n  StateClassInternal,\n  StateKeyGraph,\n  StatesAndDefaults,\n  StatesByName,\n  topologicalSort,\n  RuntimeSelectorContext,\n  SharedSelectorOptions\n} from './internals';\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\nimport { ofActionDispatched } from '../operators/of-action';\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\nimport { StateContextFactory } from '../internal/state-context-factory';\nimport { StoreValidators } from '../utils/store-validators';\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\n\n/**\n * State factory class\n * @ignore\n */\n@Injectable()\nexport class StateFactory {\n  private _connected = false;\n\n  constructor(\n    private _injector: Injector,\n    private _config: NgxsConfig,\n    @Optional()\n    @SkipSelf()\n    private _parentFactory: StateFactory,\n    private _actions: InternalActions,\n    private _actionResults: InternalDispatchedActionResults,\n    private _stateContextFactory: StateContextFactory,\n    @Optional()\n    @Inject(INITIAL_STATE_TOKEN)\n    private _initialState: any\n  ) {}\n\n  private _states: MappedStore[] = [];\n\n  public get states(): MappedStore[] {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n\n  private _statesByName: StatesByName = {};\n\n  public get statesByName(): StatesByName {\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\n  }\n\n  private _statePaths: PlainObjectOf<string> = {};\n\n  private get statePaths(): PlainObjectOf<string> {\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\n  }\n\n  public getRuntimeSelectorContext = memoize(() => {\n    const stateFactory = this;\n    const context: RuntimeSelectorContext = this._parentFactory\n      ? this._parentFactory.getRuntimeSelectorContext()\n      : {\n          getStateGetter(key: string) {\n            const path = stateFactory.statePaths[key];\n            return path ? propGetter(path.split('.'), stateFactory._config) : () => undefined;\n          },\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\n            return {\n              ...globalSelectorOptions,\n              ...(localOptions || {})\n            };\n          }\n        };\n    return context;\n  });\n\n  private static cloneDefaults(defaults: any): any {\n    let value = {};\n\n    if (Array.isArray(defaults)) {\n      value = defaults.slice();\n    } else if (isObject(defaults)) {\n      value = { ...defaults };\n    } else if (defaults === undefined) {\n      value = {};\n    } else {\n      value = defaults;\n    }\n\n    return value;\n  }\n\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\n  }\n\n  /**\n   * Add a new state to the global defs.\n   */\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\n    StateFactory.checkStatesAreValid(stateClasses);\n    const { newStates } = this.addToStatesMap(stateClasses);\n    if (!newStates.length) return [];\n\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\n    const sortedStates: string[] = topologicalSort(stateGraph);\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\n    const bootstrappedStores: MappedStore[] = [];\n\n    for (const name of sortedStates) {\n      const stateClass: StateClassInternal = nameGraph[name];\n      const path: string = paths[name];\n      const meta: MetaDataModel = stateClass[META_KEY]!;\n\n      this.addRuntimeInfoToMeta(meta, path);\n\n      const stateMap: MappedStore = {\n        name,\n        path,\n        isInitialised: false,\n        actions: meta.actions,\n        instance: this._injector.get(stateClass),\n        defaults: StateFactory.cloneDefaults(meta.defaults)\n      };\n\n      // ensure our store hasn't already been added\n      // but don't throw since it could be lazy\n      // loaded from different paths\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\n        bootstrappedStores.push(stateMap);\n      }\n\n      this.states.push(stateMap);\n    }\n\n    return bootstrappedStores;\n  }\n\n  /**\n   * Add a set of states to the store and return the defaults\n   */\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\n    const classes: StateClassInternal[] = stateClasses || [];\n\n    const mappedStores: MappedStore[] = this.add(classes);\n    const defaults = mappedStores.reduce(\n      (result: any, mappedStore: MappedStore) =>\n        setValue(result, mappedStore.path, mappedStore.defaults),\n      {}\n    );\n    return { defaults, states: mappedStores };\n  }\n\n  /**\n   * Bind the actions to the handlers\n   */\n  connectActionHandlers() {\n    if (this._connected) return;\n    this._actions\n      .pipe(\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\n        mergeMap(({ action }) =>\n          this.invokeActions(this._actions, action!).pipe(\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\n            catchError(error =>\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\n            )\n          )\n        )\n      )\n      .subscribe(ctx => this._actionResults.next(ctx));\n    this._connected = true;\n  }\n\n  /**\n   * Invoke actions on the states.\n   */\n  invokeActions(actions$: InternalActions, action: any) {\n    const type = getActionTypeFromInstance(action)!;\n    const results = [];\n\n    for (const metadata of this.states) {\n      const actionMetas = metadata.actions[type];\n\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\n          try {\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n\n            if (result instanceof Observable) {\n              // If this observable has been completed w/o emitting\n              // any value then we wouldn't want to complete the whole chain\n              // of actions. Since if any observable completes then\n              // action will be canceled.\n              // For instance if any action handler would've had such statement:\n              // `handler(ctx) { return EMPTY; }`\n              // then the action will be canceled.\n              // See https://github.com/ngxs/store/issues/1568\n              result = result.pipe(defaultIfEmpty({}));\n\n              if (actionMeta.options.cancelUncompleted) {\n                // todo: ofActionDispatched should be used with action class\n                result = result.pipe(\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\n                );\n              }\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n        }\n      }\n    }\n\n    if (!results.length) {\n      results.push(of({}));\n    }\n\n    return forkJoin(results);\n  }\n\n  private addToStatesMap(\n    stateClasses: StateClassInternal[]\n  ): { newStates: StateClassInternal[] } {\n    const newStates: StateClassInternal[] = [];\n    const statesMap: StatesByName = this.statesByName;\n\n    for (const stateClass of stateClasses) {\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\n      const unmountedState = !statesMap[stateName];\n      if (unmountedState) {\n        newStates.push(stateClass);\n        statesMap[stateName] = stateClass;\n      }\n    }\n\n    return { newStates };\n  }\n\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\n    this.statePaths[meta.name!] = path;\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\n    // We will need to come up with an alternative in v4 because this is used by many plugins\n    meta.path = path;\n  }\n\n  /**\n   * @description\n   * the method checks if the state has already been added to the tree\n   * and completed the life cycle\n   * @param name\n   * @param path\n   */\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\n    const valueIsBootstrappedInInitialState: boolean =\n      getValue(this._initialState, path) !== undefined;\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\nimport { filter, mergeMap, tap } from 'rxjs/operators';\n\nimport { StateContextFactory } from './state-context-factory';\nimport { InternalStateOperations } from './state-operations';\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\n\n@Injectable()\nexport class LifecycleStateManager {\n  constructor(\n    private internalStateOperations: InternalStateOperations,\n    private stateContextFactory: StateContextFactory,\n    private bootstrapper: NgxsBootstrapper\n  ) {}\n\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\n    this.internalStateOperations\n      .getRootStateOperations()\n      .dispatch(action)\n      .pipe(\n        filter(() => !!results),\n        tap(() => this.invokeInit(results!.states)),\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\n        filter(appBootstrapped => !!appBootstrapped)\n      )\n      .subscribe(() => this.invokeBootstrap(results!.states));\n  }\n\n  /**\n   * Invoke the init function on the states.\n   */\n  invokeInit(mappedStores: MappedStore[]): void {\n    for (const mappedStore of mappedStores) {\n      const instance: NgxsLifeCycle = mappedStore.instance;\n\n      if (instance.ngxsOnChanges) {\n        const currentAppState: PlainObject = {};\n        const newAppState: PlainObject = this.internalStateOperations\n          .getRootStateOperations()\n          .getState();\n\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\n          currentAppState,\n          newAppState\n        });\n\n        instance.ngxsOnChanges(firstDiffChange);\n      }\n\n      if (instance.ngxsOnInit) {\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\n      }\n\n      mappedStore.isInitialised = true;\n    }\n  }\n\n  /**\n   * Invoke the bootstrap function on the states.\n   */\n  invokeBootstrap(mappedStores: MappedStore[]) {\n    for (const mappedStore of mappedStores) {\n      const instance: NgxsLifeCycle = mappedStore.instance;\n      if (instance.ngxsAfterBootstrap) {\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\n      }\n    }\n  }\n\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\n    return this.stateContextFactory.createStateContext(mappedStore);\n  }\n}\n","import { memoize } from '@ngxs/store/internals';\n\nimport {\n  ensureSelectorMetadata,\n  getSelectorMetadata,\n  getStoreMetadata,\n  SelectorMetaDataModel,\n  SharedSelectorOptions,\n  RuntimeSelectorContext,\n  SelectorFactory,\n  SelectFromRootState\n} from '../internal/internals';\n\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\n\nexport const selectorOptionsMetaAccessor = {\n  getOptions: (target: any): SharedSelectorOptions => {\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\n  },\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\n    if (!target) return;\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\n  }\n};\n\ninterface CreationMetadata {\n  containerClass: any;\n  selectorName: string;\n  getSelectorOptions?: () => SharedSelectorOptions;\n}\n\ninterface RuntimeSelectorInfo {\n  selectorOptions: SharedSelectorOptions;\n  argumentSelectorFunctions: SelectFromRootState[];\n}\n\n/**\n * Function for creating a selector\n * @param selectors The selectors to use to create the arguments of this function\n * @param originalFn The original function being made into a selector\n * @param creationMetadata\n */\nexport function createSelector<T extends (...args: any[]) => any>(\n  selectors: any[] | undefined,\n  originalFn: T,\n  creationMetadata?: CreationMetadata\n) {\n  const containerClass = creationMetadata && creationMetadata.containerClass;\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\n    const returnValue = originalFn.apply(containerClass, args);\n    if (returnValue instanceof Function) {\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\n      return innerMemoizedFn;\n    }\n    return returnValue;\n  } as T;\n  const memoizedFn = memoize(wrappedFn);\n  Object.setPrototypeOf(memoizedFn, originalFn);\n\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\n\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\n      context,\n      selectorMetaData,\n      selectors\n    );\n\n    return function selectFromRoot(rootState: any) {\n      // Determine arguments from the app state using the selectors\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\n\n      // if the lambda tries to access a something on the\n      // state that doesn't exist, it will throw a TypeError.\n      // since this is quite usual behaviour, we simply return undefined if so.\n      try {\n        return memoizedFn(...results);\n      } catch (ex) {\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\n          return undefined;\n        }\n\n        throw ex;\n      }\n    };\n  };\n\n  selectorMetaData.makeRootSelector = makeRootSelector;\n\n  return memoizedFn;\n}\n\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\n  originalFn: T,\n  creationMetadata: CreationMetadata | undefined\n) {\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\n  selectorMetaData.originalFn = originalFn;\n  let getExplicitSelectorOptions = () => ({});\n  if (creationMetadata) {\n    selectorMetaData.containerClass = creationMetadata.containerClass;\n    selectorMetaData.selectorName = creationMetadata.selectorName;\n    getExplicitSelectorOptions =\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\n  }\n  const selectorMetaDataClone = { ...selectorMetaData };\n  selectorMetaData.getSelectorOptions = () =>\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\n  return selectorMetaData;\n}\n\nfunction getRuntimeSelectorInfo(\n  context: RuntimeSelectorContext,\n  selectorMetaData: SelectorMetaDataModel,\n  selectors: any[] | undefined = []\n): RuntimeSelectorInfo {\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\n  const selectorsToApply = getSelectorsToApply(\n    selectors,\n    selectorOptions,\n    selectorMetaData.containerClass\n  );\n\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\n    const factory = getRootSelectorFactory(selector);\n    return factory(context);\n  });\n  return {\n    selectorOptions,\n    argumentSelectorFunctions\n  };\n}\n\nfunction getLocalSelectorOptions(\n  selectorMetaData: SelectorMetaDataModel,\n  explicitOptions: SharedSelectorOptions\n): SharedSelectorOptions {\n  return {\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\n    ...(selectorMetaData.getSelectorOptions() || {}),\n    ...explicitOptions\n  };\n}\n\nfunction getSelectorsToApply(\n  selectors: any[] | undefined = [],\n  selectorOptions: SharedSelectorOptions,\n  containerClass: any\n) {\n  const selectorsToApply = [];\n  const canInjectContainerState =\n    selectors.length === 0 || selectorOptions.injectContainerState;\n  if (containerClass && canInjectContainerState) {\n    // If we are on a state class, add it as the first selector parameter\n    const metadata = getStoreMetadata(containerClass);\n    if (metadata) {\n      selectorsToApply.push(containerClass);\n    }\n  }\n  if (selectors) {\n    selectorsToApply.push(...selectors);\n  }\n  return selectorsToApply;\n}\n\n/**\n * This function gets the factory function to create the selector to get the selected slice from the app state\n * @ignore\n */\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\n  return (metadata && metadata.makeRootSelector) || (() => selector);\n}\n","// tslint:disable:unified-signatures\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\nimport { Observable, of, Subscription, throwError } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\n\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\nimport { InternalStateOperations } from './internal/state-operations';\nimport { getRootSelectorFactory } from './utils/selector-utils';\nimport { StateStream } from './internal/state-stream';\nimport { leaveNgxs } from './operators/leave-ngxs';\nimport { NgxsConfig } from './symbols';\nimport { StateToken } from './state-token/state-token';\nimport { StateFactory } from './internal/state-factory';\n\n@Injectable()\nexport class Store {\n  constructor(\n    private _stateStream: StateStream,\n    private _internalStateOperations: InternalStateOperations,\n    private _config: NgxsConfig,\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\n    private _stateFactory: StateFactory,\n    @Optional()\n    @Inject(INITIAL_STATE_TOKEN)\n    initialStateValue: any\n  ) {\n    this.initStateStream(initialStateValue);\n  }\n\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(actionOrActions: any | any[]): Observable<any> {\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\n  }\n\n  /**\n   * Selects a slice of data from the store.\n   */\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  select<T = any>(selector: string | Type<any>): Observable<T>;\n  select<T>(selector: StateToken<T>): Observable<T>;\n  select(selector: any): Observable<any> {\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return this._stateStream.pipe(\n      map(selectorFn),\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\n        // if error is TypeError we swallow it to prevent usual errors with property access\n        const { suppressErrors } = this._config.selectorOptions;\n\n        if (err instanceof TypeError && suppressErrors) {\n          return of(undefined);\n        }\n\n        // rethrow other errors\n        return throwError(err);\n      }),\n      distinctUntilChanged(),\n      leaveNgxs(this._internalExecutionStrategy)\n    );\n  }\n\n  /**\n   * Select one slice of data from the store.\n   */\n\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\n  selectOnce(selector: any): Observable<any> {\n    return this.select(selector).pipe(take(1));\n  }\n\n  /**\n   * Select a snapshot from the state.\n   */\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\n  selectSnapshot<T>(selector: StateToken<T>): T;\n  selectSnapshot(selector: any): any {\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return selectorFn(this._stateStream.getValue());\n  }\n\n  /**\n   * Allow the user to subscribe to the root of the state\n   */\n  subscribe(fn?: (value: any) => void): Subscription {\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\n  }\n\n  /**\n   * Return the raw value of the state.\n   */\n  snapshot(): any {\n    return this._internalStateOperations.getRootStateOperations().getState();\n  }\n\n  /**\n   * Reset the state to a specific point in time. This method is useful\n   * for plugin's who need to modify the state directly or unit testing.\n   */\n  reset(state: any) {\n    return this._internalStateOperations.getRootStateOperations().setState(state);\n  }\n\n  private getStoreBoundSelectorFn(selector: any) {\n    const makeSelectorFn = getRootSelectorFactory(selector);\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\n    return makeSelectorFn(runtimeContext);\n  }\n\n  private initStateStream(initialStateValue: any): void {\n    const value: PlainObject = this._stateStream.value;\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\n    if (storeIsEmpty) {\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\n      const storeValues: PlainObject = defaultStateNotEmpty\n        ? { ...this._config.defaultsState, ...initialStateValue }\n        : initialStateValue;\n\n      this._stateStream.next(storeValues);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Store } from '../../store';\nimport { NgxsConfig } from '../../symbols';\n\n/**\n * Allows the select decorator to get access to the DI store.\n * @internal only use in @Select decorator\n * @ignore\n */\n@Injectable()\nexport class SelectFactory {\n  public static store: Store | null = null;\n  public static config: NgxsConfig | null = null;\n\n  constructor(store: Store, config: NgxsConfig) {\n    SelectFactory.store = store;\n    SelectFactory.config = config;\n  }\n}\n","import { PlainObject } from '@ngxs/store/internals';\n\n/**\n * Init action\n */\nexport class InitState {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '@@INIT';\n  }\n}\n\n/**\n * Update action\n */\nexport class UpdateState {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '@@UPDATE_STATE';\n  }\n\n  constructor(public addedStates?: PlainObject) {}\n}\n","import { isDevMode } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nexport const ivyEnabledInDevMode$ = new ReplaySubject<boolean>(1);\n\n/**\n * Ivy exposes helper functions to the global `window.ng` object.\n * Those functions are `getComponent, getContext,\n * getListeners, getViewComponent, getHostElement, getInjector,\n * getRootComponents, getDirectives, getDebugNode`\n * Previously, old view engine exposed `window.ng.coreTokens` and\n * `window.ng.probe` if an application was in development/production.\n * Ivy doesn't expose these functions in production. Developers will be able\n * to see warnings in both JIT/AOT modes, but only if an application\n * is in development.\n */\nexport function setIvyEnabledInDevMode(): void {\n  try {\n    // `try-catch` will also handle server-side rendering, as\n    // `window is not defined` will not be thrown.\n    const ng = (window as any).ng;\n    const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;\n    const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();\n    ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\n  } catch {\n    ivyEnabledInDevMode$.next(false);\n  } finally {\n    ivyEnabledInDevMode$.complete();\n  }\n}\n","import { Inject, NgModule, Optional } from '@angular/core';\n\nimport { StateFactory } from '../internal/state-factory';\nimport { InternalStateOperations } from '../internal/state-operations';\nimport { Store } from '../store';\nimport { SelectFactory } from '../decorators/select/select-factory';\nimport { ROOT_STATE_TOKEN } from '../symbols';\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\nimport { InitState } from '../actions/actions';\nimport { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';\n\n/**\n * Root module\n * @ignore\n */\n@NgModule()\nexport class NgxsRootModule {\n  constructor(\n    factory: StateFactory,\n    internalStateOperations: InternalStateOperations,\n    _store: Store,\n    _select: SelectFactory,\n    @Optional()\n    @Inject(ROOT_STATE_TOKEN)\n    states: StateClassInternal[] = [],\n    lifecycleStateManager: LifecycleStateManager\n  ) {\n    // Validate states on having the `@Injectable()` decorator in Ivy\n    setIvyEnabledInDevMode();\n\n    // Add stores to the state graph and return their defaults\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\n\n    internalStateOperations.setStateToTheCurrentWithNew(results);\n\n    // Connect our actions stream\n    factory.connectActionHandlers();\n\n    // Dispatch the init action and invoke init and bootstrap functions after\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\n  }\n}\n","import { Inject, NgModule, Optional } from '@angular/core';\n\nimport { Store } from '../store';\nimport { InternalStateOperations } from '../internal/state-operations';\nimport { StateFactory } from '../internal/state-factory';\nimport { FEATURE_STATE_TOKEN } from '../symbols';\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\nimport { UpdateState } from '../actions/actions';\n\n/**\n * Feature module\n * @ignore\n */\n@NgModule()\nexport class NgxsFeatureModule {\n  constructor(\n    _store: Store,\n    internalStateOperations: InternalStateOperations,\n    factory: StateFactory,\n    @Optional()\n    @Inject(FEATURE_STATE_TOKEN)\n    states: StateClassInternal[][] = [],\n    lifecycleStateManager: LifecycleStateManager\n  ) {\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\n\n    // add stores to the state graph and return their defaults\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\n\n    if (results.states.length) {\n      internalStateOperations.setStateToTheCurrentWithNew(results);\n\n      // dispatch the update action and invoke init and bootstrap functions after\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\n    }\n  }\n\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\n    return states.reduce(\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\n      []\n    );\n  }\n}\n","import {\n  APP_BOOTSTRAP_LISTENER,\n  InjectionToken,\n  isDevMode,\n  ModuleWithProviders,\n  NgModule,\n  Provider\n} from '@angular/core';\nimport {\n  INITIAL_STATE_TOKEN,\n  InitialState,\n  isAngularInTestMode,\n  NGXS_STATE_CONTEXT_FACTORY,\n  NGXS_STATE_FACTORY,\n  NgxsBootstrapper,\n  StateClass\n} from '@ngxs/store/internals';\n\nimport {\n  FEATURE_STATE_TOKEN,\n  NG_DEV_MODE,\n  NG_TEST_MODE,\n  NgxsConfig,\n  NgxsModuleOptions,\n  ROOT_STATE_TOKEN\n} from './symbols';\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\nimport { StateFactory } from './internal/state-factory';\nimport { StateContextFactory } from './internal/state-context-factory';\nimport { Actions, InternalActions } from './actions-stream';\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\nimport { InternalStateOperations } from './internal/state-operations';\nimport { Store } from './store';\nimport { SelectFactory } from './decorators/select/select-factory';\nimport { StateStream } from './internal/state-stream';\nimport { PluginManager } from './plugin-manager';\nimport { NgxsRootModule } from './modules/ngxs-root.module';\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\nimport { HostEnvironment } from './host-environment/host-environment';\nimport { ConfigValidator } from './internal/config-validator';\n\n/**\n * Ngxs Module\n */\n@NgModule()\nexport class NgxsModule {\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\n\n  /**\n   * Root module factory\n   */\n  public static forRoot(\n    states: StateClass[] = [],\n    options: NgxsModuleOptions = {}\n  ): ModuleWithProviders<NgxsRootModule> {\n    return {\n      ngModule: NgxsRootModule,\n      providers: [\n        StateFactory,\n        StateContextFactory,\n        Actions,\n        InternalActions,\n        NgxsBootstrapper,\n        ConfigValidator,\n        HostEnvironment,\n        LifecycleStateManager,\n        InternalDispatcher,\n        InternalDispatchedActionResults,\n        InternalStateOperations,\n        InternalNgxsExecutionStrategy,\n        Store,\n        StateStream,\n        SelectFactory,\n        PluginManager,\n        ...states,\n        ...NgxsModule.ngxsTokenProviders(states, options)\n      ]\n    };\n  }\n\n  /**\n   * Feature module factory\n   */\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\n    return {\n      ngModule: NgxsFeatureModule,\n      providers: [\n        StateFactory,\n        PluginManager,\n        ...states,\n        {\n          provide: FEATURE_STATE_TOKEN,\n          multi: true,\n          useValue: states\n        }\n      ]\n    };\n  }\n\n  private static ngxsTokenProviders(\n    states: StateClass[],\n    options: NgxsModuleOptions\n  ): Provider[] {\n    return [\n      {\n        provide: NG_TEST_MODE,\n        useValue: isAngularInTestMode\n      },\n      {\n        provide: NG_DEV_MODE,\n        useValue: isDevMode\n      },\n      {\n        provide: NGXS_EXECUTION_STRATEGY,\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\n      },\n      {\n        provide: ROOT_STATE_TOKEN,\n        useValue: states\n      },\n      {\n        provide: NgxsModule.ROOT_OPTIONS,\n        useValue: options\n      },\n      {\n        provide: NgxsConfig,\n        useFactory: NgxsModule.ngxsConfigFactory,\n        deps: [NgxsModule.ROOT_OPTIONS]\n      },\n      {\n        provide: APP_BOOTSTRAP_LISTENER,\n        useFactory: NgxsModule.appBootstrapListenerFactory,\n        multi: true,\n        deps: [NgxsBootstrapper]\n      },\n      {\n        provide: INITIAL_STATE_TOKEN,\n        useFactory: NgxsModule.getInitialState\n      },\n      {\n        provide: NGXS_STATE_CONTEXT_FACTORY,\n        useExisting: StateContextFactory\n      },\n      {\n        provide: NGXS_STATE_FACTORY,\n        useExisting: StateFactory\n      }\n    ];\n  }\n\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\n    return Object.assign(new NgxsConfig(), options);\n  }\n\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\n    return () => bootstrapper.bootstrap();\n  }\n\n  private static getInitialState() {\n    return InitialState.pop();\n  }\n}\n","import { ensureStoreMetadata } from '../internal/internals';\nimport { ActionType, ActionOptions } from '../actions/symbols';\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\n\n/**\n * Decorates a method with a action information.\n */\nexport function Action(\n  actions: ActionType | ActionType[],\n  options?: ActionOptions\n): MethodDecorator {\n  return (target: any, name: string | symbol): void => {\n    const isStaticMethod = target.hasOwnProperty('prototype');\n\n    if (isStaticMethod) {\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\n    }\n\n    const meta = ensureStoreMetadata(target.constructor);\n\n    if (!Array.isArray(actions)) {\n      actions = [actions];\n    }\n\n    for (const action of actions) {\n      const type = action.type;\n\n      if (!meta.actions[type]) {\n        meta.actions[type] = [];\n      }\n\n      meta.actions[type].push({\n        fn: name,\n        options: options || {},\n        type\n      });\n    }\n  };\n}\n","import { ivyEnabledInDevMode$ } from './ivy-enabled-in-dev-mode';\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\n\n/**\n * All provided or injected tokens must have `@Injectable` decorator\n * (previously, injected tokens without `@Injectable` were allowed\n * if another decorator was used, e.g. pipes).\n */\nexport function ensureStateClassIsInjectable(target: any): void {\n  // `ɵprov` is a static property added by the NGCC compiler. It always exists in\n  // AOT mode because this property is added before runtime. If an application is running in\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\n  ivyEnabledInDevMode$.subscribe(_ivyEnabledInDevMode => {\n    if (_ivyEnabledInDevMode) {\n      const ngInjectableDef = target.ɵprov;\n      if (!ngInjectableDef) {\n        // Don't warn if Ivy is disabled or `ɵprov` exists on the class\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\n      }\n    }\n  });\n}\n","import { StateClass } from '@ngxs/store/internals';\n\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\nimport { StoreValidators } from '../utils/store-validators';\nimport { ensureStateClassIsInjectable } from '../ivy/ensure-state-class-is-injectable';\n\ninterface MutateMetaOptions<T> {\n  meta: MetaDataModel;\n  inheritedStateClass: StateClassInternal;\n  optionsWithInheritance: StoreOptions<T>;\n}\n\n/**\n * Decorates a class with ngxs state information.\n */\nexport function State<T>(options: StoreOptions<T>) {\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\n    const inheritanceOptions: Partial<StoreOptions<T>> =\n      inheritedStateClass[META_OPTIONS_KEY] || {};\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\n  }\n\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\n    const { children, defaults, name } = optionsWithInheritance;\n    const stateName: string | null =\n      typeof name === 'string' ? name : (name && name.getName()) || null;\n    StoreValidators.checkCorrectStateName(stateName);\n\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\n    }\n\n    meta.children = children;\n    meta.defaults = defaults;\n    meta.name = stateName;\n  }\n\n  return (target: StateClass): void => {\n    ensureStateClassIsInjectable(target);\n    const stateClass: StateClassInternal = target;\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\n  };\n}\n","import { Observable } from 'rxjs';\n\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\nimport { propGetter } from '../../internal/internals';\nimport { SelectFactory } from './select-factory';\nimport { StateToken } from '../../state-token/state-token';\nimport { ExtractTokenType } from '../../state-token/symbols';\n\nconst DOLLAR_CHAR_CODE = 36;\n\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\n  if (!SelectFactory.store) {\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\n  }\n\n  return SelectFactory.store.select(selector);\n}\n\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\n\n  if (typeof rawSelector === 'string') {\n    const propsArray: string[] = paths.length\n      ? [rawSelector, ...paths]\n      : rawSelector.split('.');\n    return propGetter(propsArray, SelectFactory.config!);\n  }\n\n  return rawSelector;\n}\n\n/**\n * @example If `foo$` => make it just `foo`\n */\nexport function removeDollarAtTheEnd(name: string): string {\n  const lastCharIndex: number = name.length - 1;\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\n}\n\nexport type PropertyType<T> = T extends StateToken<any>\n  ? Observable<ExtractTokenType<T>>\n  : T extends (...args: any[]) => any\n  ? Observable<ReturnType<T>>\n  : any;\n","import { createSelectObservable, createSelectorFn, PropertyType } from './symbols';\n\n/**\n * Decorator for selecting a slice of state from the store.\n */\nexport function Select<T>(rawSelector?: T, ...paths: string[]): PropertyDecorator {\n  return function(target, key): void {\n    const name: string = key.toString();\n    const selectorId = `__${name}__selector`;\n    const selector = createSelectorFn(name, rawSelector, paths);\n\n    Object.defineProperties(target, {\n      [selectorId]: {\n        writable: true,\n        enumerable: false,\n        configurable: true\n      },\n      [name]: {\n        enumerable: true,\n        configurable: true,\n        get(): PropertyType<T> {\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\n        }\n      }\n    });\n  };\n}\n","import { SharedSelectorOptions } from '../internal/internals';\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\n\n/**\n * Decorator for setting selector options at a method or class level.\n */\nexport function SelectorOptions(options: SharedSelectorOptions) {\n  return <ClassDecorator & MethodDecorator>(\n    function decorate<T>(\n      target: any,\n      methodName: string,\n      descriptor: TypedPropertyDescriptor<T>\n    ) {\n      if (methodName) {\n        // Method Decorator\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\n        if (originalFn) {\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\n        }\n      } else {\n        // Class Decorator\n        selectorOptionsMetaAccessor.defineOptions(target, options);\n      }\n    }\n  );\n}\n","import {\n  getSelectorMetadata as getSelectorMetadataInternal,\n  getStoreMetadata as getStoreMetadataInternal,\n  ensureStoreMetadata as ensureStoreMetadataInternal,\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\n  StateClassInternal,\n  SharedSelectorOptions\n} from './internal/internals';\nimport { PlainObjectOf } from '../internals/src/symbols';\nimport { ActionHandlerMetaData } from './actions/symbols';\n\ninterface MetaDataModel {\n  name: string | null;\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\n  defaults: any;\n  path: string | null;\n  // selectFromAppState: SelectFromState | null;\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\n  children?: StateClassInternal[];\n}\n\ninterface SelectorMetaDataModel {\n  // selectFromAppState: SelectFromState | null;\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\n  originalFn: Function | null;\n  containerClass: any;\n  selectorName: string | null;\n  getSelectorOptions: () => SharedSelectorOptions;\n}\n\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\n  return ensureStoreMetadataInternal(target);\n}\n\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\n  return getStoreMetadataInternal(target);\n}\n\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\n  return ensureSelectorMetadataInternal(target);\n}\n\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\n  return getSelectorMetadataInternal(target);\n}\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\nimport { createSelector } from '../../utils/selector-utils';\nimport { SelectorSpec, SelectorType } from './symbols';\n\n/**\n * Decorator for memoizing a state selector.\n */\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\n  return <U>(\n    target: any,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\n    const isNotMethod = !(descriptor && descriptor.value !== null);\n\n    if (isNotMethod) {\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\n    }\n\n    const originalFn = descriptor.value;\n    const memoizedFn = createSelector(selectors, originalFn as any, {\n      containerClass: target,\n      selectorName: key.toString(),\n      getSelectorOptions() {\n        return {};\n      }\n    });\n    const newDescriptor = {\n      configurable: true,\n      get() {\n        return memoizedFn;\n      }\n    };\n    // Add hidden property to descriptor\n    (<any>newDescriptor)['originalFn'] = originalFn;\n    return newDescriptor;\n  };\n}\n","import { Injectable } from '@angular/core';\n\nimport { NgxsExecutionStrategy } from './symbols';\n\n@Injectable()\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\n  enter<T>(func: () => T): T {\n    return func();\n  }\n\n  leave<T>(func: () => T): T {\n    return func();\n  }\n}\n","import { TokenName } from './symbols';\nimport {\n  ensureSelectorMetadata,\n  RuntimeSelectorContext,\n  SelectFromRootState\n} from '../internal/internals';\n\nexport class StateToken<T = void> {\n  constructor(private readonly name: TokenName<T>) {\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\n    selectorMetadata.makeRootSelector = (\n      runtimeContext: RuntimeSelectorContext\n    ): SelectFromRootState => {\n      return runtimeContext.getStateGetter(this.name);\n    };\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  toString(): string {\n    return `StateToken[${this.name}]`;\n  }\n}\n"],"names":["MESSAGES","CODE","MetaDataModel","SelectorMetaDataModel","ensureStoreMetadata","ensureStoreMetadataInternal","getStoreMetadata","getStoreMetadataInternal","ensureSelectorMetadata","ensureSelectorMetadataInternal","getSelectorMetadata","getSelectorMetadataInternal"],"mappings":"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"}
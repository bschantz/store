{"version":3,"file":"ngxs-store-operators.umd.js","sources":["../../../../packages/store/operators/src/append.ts","../../../../packages/store/operators/src/compose.ts","../../../../packages/store/operators/src/utils.ts","../../../../packages/store/operators/src/iif.ts","../../../../packages/store/operators/src/insert-item.ts","../../../../packages/store/operators/src/patch.ts","../../../../packages/store/operators/src/update-item.ts","../../../../packages/store/operators/src/remove-item.ts"],"sourcesContent":["import { StateOperator } from '@ngxs/store';\nimport { RepairType } from './utils';\n\n/**\n * @param items - Specific items to append to the end of an array\n */\nexport function append<T>(items: T[]): StateOperator<RepairType<T>[]> {\n  return function appendOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    // If `items` is `undefined` or `null` or `[]` but `existing` is provided\n    // just return `existing`\n    const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\n    if (itemsNotProvidedButExistingIs) {\n      return existing as RepairType<T>[];\n    }\n\n    if (Array.isArray(existing)) {\n      return existing.concat(items as RepairType<T>[]);\n    }\n\n    // For example if some property is added dynamically\n    // and didn't exist before thus it's not `ArrayLike`\n    return items as RepairType<T>[];\n  };\n}\n","import { StateOperator } from '@ngxs/store';\n\nexport function compose<T>(...operators: StateOperator<T>[]): StateOperator<T> {\n  return function composeOperator(existing: Readonly<T>): T {\n    return operators.reduce((accumulator, operator) => operator(accumulator), existing);\n  };\n}\n","import { StateOperator } from '@ngxs/store';\n\nimport { Predicate } from './internals';\n\nexport function isStateOperator<T>(value: T | StateOperator<T>): value is StateOperator<T> {\n  return typeof value === 'function';\n}\n\nexport function isUndefined(value: any): value is undefined {\n  return typeof value === 'undefined';\n}\n\nexport function isPredicate<T>(value: Predicate<T> | boolean | number): value is Predicate<T> {\n  return typeof value === 'function';\n}\n\nexport function isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nexport function invalidIndex(index: number): boolean {\n  return Number.isNaN(index) || index === -1;\n}\n\nexport function isNil<T>(value: T | null | undefined): value is null | undefined {\n  return value === null || isUndefined(value);\n}\n\nexport type RepairType<T> = T extends true ? boolean : (T extends false ? boolean : T);\n","import { StateOperator } from '@ngxs/store';\n\nimport { isStateOperator, isUndefined, isPredicate, RepairType } from './utils';\nimport { Predicate } from './internals';\n\nfunction retrieveValue<T>(\n  operatorOrValue: StateOperator<T> | T,\n  existing?: Readonly<RepairType<T>>\n): RepairType<T> {\n  // If state operator is a function\n  // then call it with an original value\n  if (isStateOperator(operatorOrValue)) {\n    const value = operatorOrValue(existing! as Readonly<T>);\n    return value as RepairType<T>;\n  }\n\n  // If operator or value was not provided\n  // e.g. `elseOperatorOrValue` is `undefined`\n  // then we just return an original value\n  if (isUndefined(operatorOrValue)) {\n    return (<any>existing)! as RepairType<T>;\n  }\n\n  return operatorOrValue as RepairType<T>;\n}\n\n/**\n * @param condition - Condition can be a plain boolean value or a function,\n * that returns boolean, also this function can take a value as an argument\n * to which this state operator applies\n * @param trueOperatorOrValue - Any value or a state operator\n * @param elseOperatorOrValue - Any value or a state operator\n */\nexport function iif<T>(\n  condition: Predicate<T> | boolean,\n  trueOperatorOrValue: StateOperator<T> | T,\n  elseOperatorOrValue?: StateOperator<T> | T\n): StateOperator<RepairType<T>> {\n  return function iifOperator(existing: Readonly<RepairType<T>>): RepairType<T> {\n    // Convert the value to a boolean\n    let result = !!condition;\n    // but if it is a function then run it to get the result\n    if (isPredicate(condition)) {\n      result = condition(existing);\n    }\n\n    if (result) {\n      return retrieveValue<T>(trueOperatorOrValue, existing as RepairType<T>);\n    }\n\n    return retrieveValue<T>(elseOperatorOrValue!, existing as RepairType<T>);\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { isNil, RepairType } from './utils';\n\n/**\n * @param value - Value to insert\n * @param [beforePosition] -  Specified index to insert value before, optional\n */\nexport function insertItem<T>(\n  value: T,\n  beforePosition?: number\n): StateOperator<RepairType<T>[]> {\n  return function insertItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    // Have to check explicitly for `null` and `undefined`\n    // because `value` can be `0`, thus `!value` will return `true`\n    if (isNil(value) && existing) {\n      return existing as RepairType<T>[];\n    }\n\n    // Property may be dynamic and might not existed before\n    if (!Array.isArray(existing)) {\n      return [value as RepairType<T>];\n    }\n\n    const clone = existing.slice();\n\n    let index = 0;\n\n    // No need to call `isNumber`\n    // as we are checking `> 0` not `>= 0`\n    // everything except number will return false here\n    if (beforePosition! > 0) {\n      index = beforePosition!;\n    }\n\n    clone.splice(index, 0, value as RepairType<T>);\n    return clone;\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { isStateOperator } from './utils';\n\nexport type PatchSpec<T> = { [P in keyof T]?: T[P] | StateOperator<NonNullable<T[P]>> };\n\ntype PatchValues<T> = {\n  readonly [P in keyof T]?: T[P] extends (...args: any[]) => infer R ? R : T[P];\n};\n\ntype PatchOperator<T> = <U extends PatchValues<T>>(existing: Readonly<U>) => U;\n\nexport function patch<T>(patchObject: PatchSpec<T>): PatchOperator<T> {\n  return function patchStateOperator<U extends PatchValues<T>>(existing: Readonly<U>): U {\n    let clone = null;\n    for (const k in patchObject) {\n      const newValue = patchObject[k];\n      const existingPropValue = existing[k];\n      const newPropValue = isStateOperator(newValue)\n        ? newValue(<any>existingPropValue)\n        : newValue;\n      if (newPropValue !== existingPropValue) {\n        if (!clone) {\n          clone = { ...(<any>existing) };\n        }\n        clone[k] = newPropValue;\n      }\n    }\n    return clone || existing;\n  };\n}\n","import { StateOperator } from '@ngxs/store';\n\nimport { isStateOperator, isPredicate, isNumber, invalidIndex, RepairType } from './utils';\nimport { Predicate } from './internals';\n\n/**\n * @param selector - Index of item in the array or a predicate function\n * that can be provided in `Array.prototype.findIndex`\n * @param operatorOrValue - New value under the `selector` index or a\n * function that can be applied to an existing value\n */\nexport function updateItem<T>(\n  selector: number | Predicate<T>,\n  operatorOrValue: T | StateOperator<T>\n): StateOperator<RepairType<T>[]> {\n  return function updateItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    let index = -1;\n\n    if (isPredicate(selector)) {\n      index = existing.findIndex(selector);\n    } else if (isNumber(selector)) {\n      index = selector;\n    }\n\n    if (invalidIndex(index)) {\n      return existing as RepairType<T>[];\n    }\n\n    let value: T = null!;\n    // Need to check if the new item value will change the existing item value\n    // then, only if it will change it then clone the array and set the item\n    if (isStateOperator(operatorOrValue)) {\n      value = operatorOrValue(existing[index] as Readonly<T>);\n    } else {\n      value = operatorOrValue;\n    }\n\n    // If the value hasn't been mutated\n    // then we just return `existing` array\n    if (value === existing[index]) {\n      return existing as RepairType<T>[];\n    }\n\n    const clone = existing.slice();\n    clone[index] = value as RepairType<T>;\n    return clone;\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { Predicate } from './internals';\nimport { isPredicate, isNumber, invalidIndex, RepairType } from './utils';\n\n/**\n * @param selector - index or predicate to remove an item from an array by\n */\nexport function removeItem<T>(\n  selector: number | Predicate<T>\n): StateOperator<RepairType<T>[]> {\n  return function removeItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    let index = -1;\n\n    if (isPredicate(selector)) {\n      index = existing.findIndex(selector);\n    } else if (isNumber(selector)) {\n      index = selector;\n    }\n\n    if (invalidIndex(index)) {\n      return existing as RepairType<T>[];\n    }\n\n    const clone = existing.slice();\n    clone.splice(index, 1);\n    return clone;\n  };\n}\n"],"names":[],"mappings":"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"}
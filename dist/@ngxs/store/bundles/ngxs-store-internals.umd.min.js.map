{"version":3,"sources":["../../../../packages/store/internals/src/memoize.ts","../../../../packages/store/internals/src/angular.ts","../../../../packages/store/internals/src/ngxs-bootstrapper.ts","../../../../packages/store/internals/src/initial-state.ts","../../../../packages/store/internals/src/internal-tokens.ts"],"names":["defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","length","i","memoize","func","lastArgs","lastResult","memoized","arguments","apply","reset","isAngularInTestMode","platformRef","getPlatform","compilerOptions","injector","get","COMPILER_OPTIONS","some","item","providers","provider","provide","name","NgxsBootstrapper","this","bootstrap$","ReplaySubject","Object","defineProperty","prototype","asObservable","bootstrap","complete","Injectable","INITIAL_STATE_TOKEN","InjectionToken","InitialState","set","state","value","pop","NGXS_STATE_CONTEXT_FACTORY","NGXS_STATE_FACTORY"],"mappings":"2ZAAA,SAASA,EAAqBC,EAAQC,GACpC,OAAOD,IAAMC,EAGf,SAASC,EACPC,EACAC,EACAC,GAEA,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAKT,QADMA,EAASF,EAAKE,OACXC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKJ,EAAcC,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,WASOC,EACdC,EACAN,QAAA,IAAAA,IAAAA,EAAAJ,OAEIW,EAA8B,KAC9BC,EAAkB,KAEtB,SAASC,IAOP,OANKV,EAA2BC,EAAeO,EAAUG,aAEvDF,EAAa,EAAiBG,MAAM,KAAMD,YAG5CH,EAAWG,UACJF,EAOT,OALA,EAAgBI,MAAK,WAEnBL,EAAW,KACXC,EAAa,MAEf,MC/BWK,EAAsBR,GAjBnC,eACQS,EAAkCC,EAAAA,cACxC,IAAKD,EAAa,OAAO,MACnBE,EAAkBF,EAAYG,SAASC,IAASC,EAAAA,iBAAkB,MACxE,QAAKH,GACgBA,EAAgBI,MAAI,SAAEC,GAEzC,OADmBA,GAAQA,EAAKC,WAAc,IAC7BF,MAAI,SAAEG,GACrB,OACGA,GAAYA,EAASC,SAAqC,yBAA1BD,EAASC,QAAQC,OAClD,wBCVR,SAAAC,IAKUC,KAAAC,WAAa,IAAIC,EAAAA,cAAuB,UAEhDC,OAAAC,eAAIL,EAAAM,UAAA,mBAAgB,KAApB,WACE,OAAOL,KAAKC,WAAWK,gDAOzBP,EAAAM,UAAAE,UAAA,WACEP,KAAKC,WAAW1B,MAAK,GACrByB,KAAKC,WAAWO,qCAjBnBC,EAAAA,iBCAYC,EAAsB,IAAIC,EAAAA,eAAoB,oCAE3D,SAAAC,YAGgBA,EAAAC,IAAP,SAAWC,GAChBd,KAAKe,MAAQD,GAGDF,EAAAI,IAAP,eACCF,EAAqBd,KAAKe,MAEhC,OADAf,KAAKe,MAAQ,GACND,QATMF,EAAAG,MAAqB,OCDzBE,EAAkD,IAAIN,EAAAA,eACjE,iCAMWO,EAA0C,IAAIP,EAAAA,eACzD","sourcesContent":["function defaultEqualityCheck(a: any, b: any) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(\n  equalityCheck: (a: any, b: any) => boolean,\n  prev: IArguments | null,\n  next: IArguments | null\n) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  func: T,\n  equalityCheck = defaultEqualityCheck\n): T {\n  let lastArgs: IArguments | null = null;\n  let lastResult: any = null;\n  // we reference arguments instead of spreading them for performance reasons\n  function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = (<Function>func).apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  }\n  (<any>memoized).reset = function() {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n  return memoized as T;\n}\n","import { getPlatform, COMPILER_OPTIONS, CompilerOptions, PlatformRef } from '@angular/core';\nimport { memoize } from './memoize';\n\nfunction _isAngularInTestMode() {\n  const platformRef: PlatformRef | null = getPlatform();\n  if (!platformRef) return false;\n  const compilerOptions = platformRef.injector.get<any>(COMPILER_OPTIONS, null);\n  if (!compilerOptions) return false;\n  const isInTestMode = compilerOptions.some((item: CompilerOptions) => {\n    const providers = (item && item.providers) || [];\n    return providers.some((provider: any) => {\n      return (\n        (provider && provider.provide && provider.provide.name === 'MockNgModuleResolver') ||\n        false\n      );\n    });\n  });\n  return isInTestMode;\n}\n\nexport const isAngularInTestMode = memoize(_isAngularInTestMode);\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n@Injectable()\nexport class NgxsBootstrapper {\n  /**\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n   */\n  private bootstrap$ = new ReplaySubject<boolean>(1);\n\n  get appBootstrapped$(): Observable<boolean> {\n    return this.bootstrap$.asObservable();\n  }\n\n  /**\n   * This event will be emitted after attaching `ComponentRef` of the root component\n   * to the tree of views, that's a signal that application has been fully rendered\n   */\n  bootstrap(): void {\n    this.bootstrap$.next(true);\n    this.bootstrap$.complete();\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { PlainObject } from './symbols';\n\nexport const INITIAL_STATE_TOKEN = new InjectionToken<any>('INITIAL_STATE_TOKEN');\n\nexport class InitialState {\n  private static value: PlainObject = {};\n\n  public static set(state: PlainObject) {\n    this.value = state;\n  }\n\n  public static pop(): PlainObject {\n    const state: PlainObject = this.value;\n    this.value = {};\n    return state;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\n */\nexport const NGXS_STATE_CONTEXT_FACTORY: InjectionToken<any> = new InjectionToken(\n  'Internals.StateContextFactory'\n);\n\n/**\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\n */\nexport const NGXS_STATE_FACTORY: InjectionToken<any> = new InjectionToken(\n  'Internals.StateFactory'\n);\n"]}
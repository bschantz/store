{"version":3,"sources":["../../../../packages/store/operators/src/utils.ts","../../../../packages/store/operators/src/iif.ts","../../../../packages/store/operators/src/append.ts","../../../../packages/store/operators/src/compose.ts","../../../../packages/store/operators/src/insert-item.ts","../../../../packages/store/operators/src/patch.ts","../../../../packages/store/operators/src/remove-item.ts","../../../../packages/store/operators/src/update-item.ts"],"names":["isStateOperator","value","isUndefined","isPredicate","isNumber","invalidIndex","index","Number","isNaN","retrieveValue","operatorOrValue","existing","items","length","Array","isArray","concat","operators","_i","arguments","reduce","accumulator","operator","condition","trueOperatorOrValue","elseOperatorOrValue","result","beforePosition","isNil","clone","slice","splice","patchObject","k","newValue","existingPropValue","newPropValue","Object","assign","selector","findIndex"],"mappings":"+UAIgBA,EAAmBC,GACjC,MAAwB,mBAAVA,WAGAC,EAAYD,GAC1B,YAAwB,IAAVA,WAGAE,EAAeF,GAC7B,MAAwB,mBAAVA,WAGAG,EAASH,GACvB,MAAwB,iBAAVA,WAGAI,EAAaC,GAC3B,OAAOC,OAAOC,MAAMF,KAAqB,IAAXA,EChBhC,SAASG,EACPC,EACAC,GAIA,OAAIX,EAAgBU,GACJA,EAAe,GAO3BR,EAAYQ,GACd,EAGF,oBCjBwBE,GACxB,OAAA,SAA+BD,GAI7B,QADwCC,IAAUA,EAAMC,SAAWF,EAEjE,EAGEG,MAAMC,QAAQJ,GACTA,EAASK,OAAM,GAKxB,6BCnBuB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAN,OAAAK,IAAAD,EAAAC,GAAAC,UAAAD,GACzB,OAAA,SAAgCP,GAC9B,OAAOM,EAAUG,QAAM,SAAEC,EAAaC,GAAa,OAAAA,EAASD,KAAcV,oBF8B5EY,EACAC,EACAC,GAEA,OAAA,SAA4Bd,OAEtBe,IAAWH,EAMf,OAJIpB,EAAYoB,KACdG,EAASH,EAAUZ,IAIZF,EADLiB,EACsBF,EAGN,EAHyB,2BGvC/CvB,EACA0B,GAEA,OAAA,SAAmChB,GAGjC,YJUqBV,GACvB,OAAiB,OAAVA,GAAkBC,EAAYD,GIX/B2B,CAAM3B,IAAUU,EAClB,OAAA,EAIF,IAAKG,MAAMC,QAAQJ,GACjB,MAAO,CAAA,OAGHkB,EAAQlB,EAASmB,QAEnBxB,EAAQ,EAUZ,OALI,EAAkB,IACpBA,EAAK,GAGPuB,EAAME,OAAOzB,EAAO,EAAC,GACduB,yCCxBcG,GACvB,OAAA,SAA6DrB,OACvDkB,EAAQ,KACZ,IAAK,IAAMI,KAAKD,EAAa,KACrBE,EAAWF,EAAYC,GACvBE,EAAoBxB,EAASsB,GAC7BG,EAAepC,EAAgBkC,GACjCA,EAAQ,GACRA,EACAE,IAAiBD,IACdN,IACHA,EAAKQ,OAAAC,OAAA,GAAA,IAEPT,EAAMI,GAAKG,GAGf,OAAOP,GAASlB,0BCnBlB4B,GAEA,OAAA,SAAmC5B,OAC7BL,GAAS,EAQb,GANIH,EAAYoC,GACdjC,EAAQK,EAAS6B,UAAUD,GAClBnC,EAASmC,KAClBjC,EAAQiC,GAGNlC,EAAaC,GACf,OAAA,MAGIuB,EAAQlB,EAASmB,QAEvB,OADAD,EAAME,OAAOzB,EAAO,GACbuB,0BCbTU,EACA7B,GAEA,OAAA,SAAmCC,OAC7BL,GAAS,EAQb,GANIH,EAAYoC,GACdjC,EAAQK,EAAS6B,UAAUD,GAClBnC,EAASmC,KAClBjC,EAAQiC,GAGNlC,EAAaC,GACf,OAAA,MAGEL,EAAK,KAWT,IAPEA,EADED,EAAgBU,GACVA,EAAgBC,EAASL,IAEzBI,KAKIC,EAASL,GACrB,OAAA,MAGIuB,EAAQlB,EAASmB,QAEvB,OADAD,EAAMvB,GAAM,EACLuB","sourcesContent":["import { StateOperator } from '@ngxs/store';\n\nimport { Predicate } from './internals';\n\nexport function isStateOperator<T>(value: T | StateOperator<T>): value is StateOperator<T> {\n  return typeof value === 'function';\n}\n\nexport function isUndefined(value: any): value is undefined {\n  return typeof value === 'undefined';\n}\n\nexport function isPredicate<T>(value: Predicate<T> | boolean | number): value is Predicate<T> {\n  return typeof value === 'function';\n}\n\nexport function isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nexport function invalidIndex(index: number): boolean {\n  return Number.isNaN(index) || index === -1;\n}\n\nexport function isNil<T>(value: T | null | undefined): value is null | undefined {\n  return value === null || isUndefined(value);\n}\n\nexport type RepairType<T> = T extends true ? boolean : (T extends false ? boolean : T);\n","import { StateOperator } from '@ngxs/store';\n\nimport { isStateOperator, isUndefined, isPredicate, RepairType } from './utils';\nimport { Predicate } from './internals';\n\nfunction retrieveValue<T>(\n  operatorOrValue: StateOperator<T> | T,\n  existing?: Readonly<RepairType<T>>\n): RepairType<T> {\n  // If state operator is a function\n  // then call it with an original value\n  if (isStateOperator(operatorOrValue)) {\n    const value = operatorOrValue(existing! as Readonly<T>);\n    return value as RepairType<T>;\n  }\n\n  // If operator or value was not provided\n  // e.g. `elseOperatorOrValue` is `undefined`\n  // then we just return an original value\n  if (isUndefined(operatorOrValue)) {\n    return (<any>existing)! as RepairType<T>;\n  }\n\n  return operatorOrValue as RepairType<T>;\n}\n\n/**\n * @param condition - Condition can be a plain boolean value or a function,\n * that returns boolean, also this function can take a value as an argument\n * to which this state operator applies\n * @param trueOperatorOrValue - Any value or a state operator\n * @param elseOperatorOrValue - Any value or a state operator\n */\nexport function iif<T>(\n  condition: Predicate<T> | boolean,\n  trueOperatorOrValue: StateOperator<T> | T,\n  elseOperatorOrValue?: StateOperator<T> | T\n): StateOperator<RepairType<T>> {\n  return function iifOperator(existing: Readonly<RepairType<T>>): RepairType<T> {\n    // Convert the value to a boolean\n    let result = !!condition;\n    // but if it is a function then run it to get the result\n    if (isPredicate(condition)) {\n      result = condition(existing);\n    }\n\n    if (result) {\n      return retrieveValue<T>(trueOperatorOrValue, existing as RepairType<T>);\n    }\n\n    return retrieveValue<T>(elseOperatorOrValue!, existing as RepairType<T>);\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { RepairType } from './utils';\n\n/**\n * @param items - Specific items to append to the end of an array\n */\nexport function append<T>(items: T[]): StateOperator<RepairType<T>[]> {\n  return function appendOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    // If `items` is `undefined` or `null` or `[]` but `existing` is provided\n    // just return `existing`\n    const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\n    if (itemsNotProvidedButExistingIs) {\n      return existing as RepairType<T>[];\n    }\n\n    if (Array.isArray(existing)) {\n      return existing.concat(items as RepairType<T>[]);\n    }\n\n    // For example if some property is added dynamically\n    // and didn't exist before thus it's not `ArrayLike`\n    return items as RepairType<T>[];\n  };\n}\n","import { StateOperator } from '@ngxs/store';\n\nexport function compose<T>(...operators: StateOperator<T>[]): StateOperator<T> {\n  return function composeOperator(existing: Readonly<T>): T {\n    return operators.reduce((accumulator, operator) => operator(accumulator), existing);\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { isNil, RepairType } from './utils';\n\n/**\n * @param value - Value to insert\n * @param [beforePosition] -  Specified index to insert value before, optional\n */\nexport function insertItem<T>(\n  value: T,\n  beforePosition?: number\n): StateOperator<RepairType<T>[]> {\n  return function insertItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    // Have to check explicitly for `null` and `undefined`\n    // because `value` can be `0`, thus `!value` will return `true`\n    if (isNil(value) && existing) {\n      return existing as RepairType<T>[];\n    }\n\n    // Property may be dynamic and might not existed before\n    if (!Array.isArray(existing)) {\n      return [value as RepairType<T>];\n    }\n\n    const clone = existing.slice();\n\n    let index = 0;\n\n    // No need to call `isNumber`\n    // as we are checking `> 0` not `>= 0`\n    // everything except number will return false here\n    if (beforePosition! > 0) {\n      index = beforePosition!;\n    }\n\n    clone.splice(index, 0, value as RepairType<T>);\n    return clone;\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { isStateOperator } from './utils';\n\nexport type PatchSpec<T> = { [P in keyof T]?: T[P] | StateOperator<NonNullable<T[P]>> };\n\ntype PatchValues<T> = {\n  readonly [P in keyof T]?: T[P] extends (...args: any[]) => infer R ? R : T[P];\n};\n\ntype PatchOperator<T> = <U extends PatchValues<T>>(existing: Readonly<U>) => U;\n\nexport function patch<T>(patchObject: PatchSpec<T>): PatchOperator<T> {\n  return function patchStateOperator<U extends PatchValues<T>>(existing: Readonly<U>): U {\n    let clone = null;\n    for (const k in patchObject) {\n      const newValue = patchObject[k];\n      const existingPropValue = existing[k];\n      const newPropValue = isStateOperator(newValue)\n        ? newValue(<any>existingPropValue)\n        : newValue;\n      if (newPropValue !== existingPropValue) {\n        if (!clone) {\n          clone = { ...(<any>existing) };\n        }\n        clone[k] = newPropValue;\n      }\n    }\n    return clone || existing;\n  };\n}\n","import { StateOperator } from '@ngxs/store';\nimport { Predicate } from './internals';\nimport { isPredicate, isNumber, invalidIndex, RepairType } from './utils';\n\n/**\n * @param selector - index or predicate to remove an item from an array by\n */\nexport function removeItem<T>(\n  selector: number | Predicate<T>\n): StateOperator<RepairType<T>[]> {\n  return function removeItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    let index = -1;\n\n    if (isPredicate(selector)) {\n      index = existing.findIndex(selector);\n    } else if (isNumber(selector)) {\n      index = selector;\n    }\n\n    if (invalidIndex(index)) {\n      return existing as RepairType<T>[];\n    }\n\n    const clone = existing.slice();\n    clone.splice(index, 1);\n    return clone;\n  };\n}\n","import { StateOperator } from '@ngxs/store';\n\nimport { isStateOperator, isPredicate, isNumber, invalidIndex, RepairType } from './utils';\nimport { Predicate } from './internals';\n\n/**\n * @param selector - Index of item in the array or a predicate function\n * that can be provided in `Array.prototype.findIndex`\n * @param operatorOrValue - New value under the `selector` index or a\n * function that can be applied to an existing value\n */\nexport function updateItem<T>(\n  selector: number | Predicate<T>,\n  operatorOrValue: T | StateOperator<T>\n): StateOperator<RepairType<T>[]> {\n  return function updateItemOperator(existing: Readonly<RepairType<T>[]>): RepairType<T>[] {\n    let index = -1;\n\n    if (isPredicate(selector)) {\n      index = existing.findIndex(selector);\n    } else if (isNumber(selector)) {\n      index = selector;\n    }\n\n    if (invalidIndex(index)) {\n      return existing as RepairType<T>[];\n    }\n\n    let value: T = null!;\n    // Need to check if the new item value will change the existing item value\n    // then, only if it will change it then clone the array and set the item\n    if (isStateOperator(operatorOrValue)) {\n      value = operatorOrValue(existing[index] as Readonly<T>);\n    } else {\n      value = operatorOrValue;\n    }\n\n    // If the value hasn't been mutated\n    // then we just return `existing` array\n    if (value === existing[index]) {\n      return existing as RepairType<T>[];\n    }\n\n    const clone = existing.slice();\n    clone[index] = value as RepairType<T>;\n    return clone;\n  };\n}\n"]}
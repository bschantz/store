/**
 * @fileoverview added by tsickle
 * Generated from: src/configs/messages.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const VALIDATION_CODE = {
    STATE_NAME: "STATE_NAME",
    STATE_UNIQUE: "STATE_UNIQUE",
    STATE_NAME_PROPERTY: "STATE_NAME_PROPERTY",
    STATE_DECORATOR: "STATE_DECORATOR",
    INCORRECT_PRODUCTION: "INCORRECT_PRODUCTION",
    INCORRECT_DEVELOPMENT: "INCORRECT_DEVELOPMENT",
    SELECT_FACTORY_NOT_CONNECTED: "SELECT_FACTORY_NOT_CONNECTED",
    ACTION_DECORATOR: "ACTION_DECORATOR",
    SELECTOR_DECORATOR: "SELECTOR_DECORATOR",
    ZONE_WARNING: "ZONE_WARNING",
    PATCHING_ARRAY: "PATCHING_ARRAY",
    PATCHING_PRIMITIVE: "PATCHING_PRIMITIVE",
    UNDECORATED_STATE_IN_IVY: "UNDECORATED_STATE_IN_IVY",
};
export { VALIDATION_CODE };
/** @type {?} */
export const CONFIG_MESSAGES = {
    [VALIDATION_CODE.STATE_NAME]: (/**
     * @param {?} name
     * @return {?}
     */
    (name) => `${name} is not a valid state name. It needs to be a valid object property name.`),
    [VALIDATION_CODE.STATE_NAME_PROPERTY]: (/**
     * @return {?}
     */
    () => `States must register a 'name' property`),
    [VALIDATION_CODE.STATE_UNIQUE]: (/**
     * @param {?} current
     * @param {?} newName
     * @param {?} oldName
     * @return {?}
     */
    (current, newName, oldName) => `State name '${current}' from ${newName} already exists in ${oldName}`),
    [VALIDATION_CODE.STATE_DECORATOR]: (/**
     * @return {?}
     */
    () => 'States must be decorated with @State() decorator'),
    [VALIDATION_CODE.INCORRECT_PRODUCTION]: (/**
     * @return {?}
     */
    () => 'Angular is running in production mode but NGXS is still running in the development mode!\n' +
        'Please set developmentMode to false on the NgxsModule options when in production mode.\n' +
        'NgxsModule.forRoot(states, { developmentMode: !environment.production })'),
    [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: (/**
     * @return {?}
     */
    () => 'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\n' +
        'NgxsModule.forRoot(states, { developmentMode: !environment.production })'),
    [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: (/**
     * @return {?}
     */
    () => 'You have forgotten to import the NGXS module!'),
    [VALIDATION_CODE.ACTION_DECORATOR]: (/**
     * @return {?}
     */
    () => '@Action() decorator cannot be used with static methods'),
    [VALIDATION_CODE.SELECTOR_DECORATOR]: (/**
     * @return {?}
     */
    () => 'Selectors only work on methods'),
    [VALIDATION_CODE.ZONE_WARNING]: (/**
     * @return {?}
     */
    () => 'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\n' +
        'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\n' +
        'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })'),
    [VALIDATION_CODE.PATCHING_ARRAY]: (/**
     * @return {?}
     */
    () => 'Patching arrays is not supported.'),
    [VALIDATION_CODE.PATCHING_PRIMITIVE]: (/**
     * @return {?}
     */
    () => 'Patching primitives is not supported.'),
    [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (/**
     * @param {?} name
     * @return {?}
     */
    (name) => `'${name}' class should be decorated with @Injectable() right after the @State() decorator`)
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvc3RvcmUvc3JjL2NvbmZpZ3MvbWVzc2FnZXMuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE1BQVksZUFBZTtJQUN6QixVQUFVLGNBQWU7SUFDekIsWUFBWSxnQkFBaUI7SUFDN0IsbUJBQW1CLHVCQUF3QjtJQUMzQyxlQUFlLG1CQUFvQjtJQUNuQyxvQkFBb0Isd0JBQXlCO0lBQzdDLHFCQUFxQix5QkFBMEI7SUFDL0MsNEJBQTRCLGdDQUFpQztJQUM3RCxnQkFBZ0Isb0JBQXFCO0lBQ3JDLGtCQUFrQixzQkFBdUI7SUFDekMsWUFBWSxnQkFBaUI7SUFDN0IsY0FBYyxrQkFBbUI7SUFDakMsa0JBQWtCLHNCQUF1QjtJQUN6Qyx3QkFBd0IsNEJBQTZCO0VBQ3REOzs7QUFFRCxNQUFNLE9BQU8sZUFBZSxHQUFHO0lBQzdCLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQzs7OztJQUFFLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FDN0MsR0FBRyxJQUFJLDBFQUEwRSxDQUFBO0lBQ25GLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FBQyx3Q0FBd0MsQ0FBQTtJQUNyRixDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUM7Ozs7OztJQUFFLENBQUMsT0FBZSxFQUFFLE9BQWUsRUFBRSxPQUFlLEVBQUUsRUFBRSxDQUNwRixlQUFlLE9BQU8sVUFBVSxPQUFPLHNCQUFzQixPQUFPLEVBQUUsQ0FBQTtJQUN4RSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUM7OztJQUFFLEdBQUcsRUFBRSxDQUFDLGtEQUFrRCxDQUFBO0lBQzNGLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FDM0MsNEZBQTRGO1FBQzVGLDBGQUEwRjtRQUMxRiwwRUFBMEUsQ0FBQTtJQUM1RSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQzVDLDhHQUE4RztRQUM5RywwRUFBMEUsQ0FBQTtJQUM1RSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQ25ELCtDQUErQyxDQUFBO0lBQ2pELENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FDdkMsd0RBQXdELENBQUE7SUFDMUQsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUM7OztJQUFFLEdBQUcsRUFBRSxDQUFDLGdDQUFnQyxDQUFBO0lBQzVFLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQ25DLDZHQUE2RztRQUM3Ryx3RkFBd0Y7UUFDeEYsOEVBQThFLENBQUE7SUFDaEYsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDOzs7SUFBRSxHQUFHLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQTtJQUMzRSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQzs7O0lBQUUsR0FBRyxFQUFFLENBQUMsdUNBQXVDLENBQUE7SUFDbkYsQ0FBQyxlQUFlLENBQUMsd0JBQXdCLENBQUM7Ozs7SUFBRSxDQUFDLElBQVksRUFBRSxFQUFFLENBQzNELElBQUksSUFBSSxtRkFBbUYsQ0FBQTtDQUM5RiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIFZBTElEQVRJT05fQ09ERSB7XG4gIFNUQVRFX05BTUUgPSAnU1RBVEVfTkFNRScsXG4gIFNUQVRFX1VOSVFVRSA9ICdTVEFURV9VTklRVUUnLFxuICBTVEFURV9OQU1FX1BST1BFUlRZID0gJ1NUQVRFX05BTUVfUFJPUEVSVFknLFxuICBTVEFURV9ERUNPUkFUT1IgPSAnU1RBVEVfREVDT1JBVE9SJyxcbiAgSU5DT1JSRUNUX1BST0RVQ1RJT04gPSAnSU5DT1JSRUNUX1BST0RVQ1RJT04nLFxuICBJTkNPUlJFQ1RfREVWRUxPUE1FTlQgPSAnSU5DT1JSRUNUX0RFVkVMT1BNRU5UJyxcbiAgU0VMRUNUX0ZBQ1RPUllfTk9UX0NPTk5FQ1RFRCA9ICdTRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEJyxcbiAgQUNUSU9OX0RFQ09SQVRPUiA9ICdBQ1RJT05fREVDT1JBVE9SJyxcbiAgU0VMRUNUT1JfREVDT1JBVE9SID0gJ1NFTEVDVE9SX0RFQ09SQVRPUicsXG4gIFpPTkVfV0FSTklORyA9ICdaT05FX1dBUk5JTkcnLFxuICBQQVRDSElOR19BUlJBWSA9ICdQQVRDSElOR19BUlJBWScsXG4gIFBBVENISU5HX1BSSU1JVElWRSA9ICdQQVRDSElOR19QUklNSVRJVkUnLFxuICBVTkRFQ09SQVRFRF9TVEFURV9JTl9JVlkgPSAnVU5ERUNPUkFURURfU1RBVEVfSU5fSVZZJ1xufVxuXG5leHBvcnQgY29uc3QgQ09ORklHX01FU1NBR0VTID0ge1xuICBbVkFMSURBVElPTl9DT0RFLlNUQVRFX05BTUVdOiAobmFtZTogc3RyaW5nKSA9PlxuICAgIGAke25hbWV9IGlzIG5vdCBhIHZhbGlkIHN0YXRlIG5hbWUuIEl0IG5lZWRzIHRvIGJlIGEgdmFsaWQgb2JqZWN0IHByb3BlcnR5IG5hbWUuYCxcbiAgW1ZBTElEQVRJT05fQ09ERS5TVEFURV9OQU1FX1BST1BFUlRZXTogKCkgPT4gYFN0YXRlcyBtdXN0IHJlZ2lzdGVyIGEgJ25hbWUnIHByb3BlcnR5YCxcbiAgW1ZBTElEQVRJT05fQ09ERS5TVEFURV9VTklRVUVdOiAoY3VycmVudDogc3RyaW5nLCBuZXdOYW1lOiBzdHJpbmcsIG9sZE5hbWU6IHN0cmluZykgPT5cbiAgICBgU3RhdGUgbmFtZSAnJHtjdXJyZW50fScgZnJvbSAke25ld05hbWV9IGFscmVhZHkgZXhpc3RzIGluICR7b2xkTmFtZX1gLFxuICBbVkFMSURBVElPTl9DT0RFLlNUQVRFX0RFQ09SQVRPUl06ICgpID0+ICdTdGF0ZXMgbXVzdCBiZSBkZWNvcmF0ZWQgd2l0aCBAU3RhdGUoKSBkZWNvcmF0b3InLFxuICBbVkFMSURBVElPTl9DT0RFLklOQ09SUkVDVF9QUk9EVUNUSU9OXTogKCkgPT5cbiAgICAnQW5ndWxhciBpcyBydW5uaW5nIGluIHByb2R1Y3Rpb24gbW9kZSBidXQgTkdYUyBpcyBzdGlsbCBydW5uaW5nIGluIHRoZSBkZXZlbG9wbWVudCBtb2RlIVxcbicgK1xuICAgICdQbGVhc2Ugc2V0IGRldmVsb3BtZW50TW9kZSB0byBmYWxzZSBvbiB0aGUgTmd4c01vZHVsZSBvcHRpb25zIHdoZW4gaW4gcHJvZHVjdGlvbiBtb2RlLlxcbicgK1xuICAgICdOZ3hzTW9kdWxlLmZvclJvb3Qoc3RhdGVzLCB7IGRldmVsb3BtZW50TW9kZTogIWVudmlyb25tZW50LnByb2R1Y3Rpb24gfSknLFxuICBbVkFMSURBVElPTl9DT0RFLklOQ09SUkVDVF9ERVZFTE9QTUVOVF06ICgpID0+XG4gICAgJ1JFQ09NTUVOREFUSU9OOiBTZXQgZGV2ZWxvcG1lbnRNb2RlIHRvIHRydWUgb24gdGhlIE5neHNNb2R1bGUgd2hlbiBBbmd1bGFyIGlzIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG4nICtcbiAgICAnTmd4c01vZHVsZS5mb3JSb290KHN0YXRlcywgeyBkZXZlbG9wbWVudE1vZGU6ICFlbnZpcm9ubWVudC5wcm9kdWN0aW9uIH0pJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEXTogKCkgPT5cbiAgICAnWW91IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCB0aGUgTkdYUyBtb2R1bGUhJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5BQ1RJT05fREVDT1JBVE9SXTogKCkgPT5cbiAgICAnQEFjdGlvbigpIGRlY29yYXRvciBjYW5ub3QgYmUgdXNlZCB3aXRoIHN0YXRpYyBtZXRob2RzJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RPUl9ERUNPUkFUT1JdOiAoKSA9PiAnU2VsZWN0b3JzIG9ubHkgd29yayBvbiBtZXRob2RzJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5aT05FX1dBUk5JTkddOiAoKSA9PlxuICAgICdZb3VyIGFwcGxpY2F0aW9uIHdhcyBib290c3RyYXBwZWQgd2l0aCBub29wZWQgem9uZSBhbmQgeW91ciBleGVjdXRpb24gc3RyYXRlZ3kgcmVxdWlyZXMgYW4gYWN0dWFsIE5nWm9uZSFcXG4nICtcbiAgICAnUGxlYXNlIHNldCB0aGUgdmFsdWUgb2YgdGhlIGV4ZWN1dGlvblN0cmF0ZWd5IHByb3BlcnR5IHRvIE5vb3BOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kuXFxuJyArXG4gICAgJ05neHNNb2R1bGUuZm9yUm9vdChzdGF0ZXMsIHsgZXhlY3V0aW9uU3RyYXRlZ3k6IE5vb3BOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kgfSknLFxuICBbVkFMSURBVElPTl9DT0RFLlBBVENISU5HX0FSUkFZXTogKCkgPT4gJ1BhdGNoaW5nIGFycmF5cyBpcyBub3Qgc3VwcG9ydGVkLicsXG4gIFtWQUxJREFUSU9OX0NPREUuUEFUQ0hJTkdfUFJJTUlUSVZFXTogKCkgPT4gJ1BhdGNoaW5nIHByaW1pdGl2ZXMgaXMgbm90IHN1cHBvcnRlZC4nLFxuICBbVkFMSURBVElPTl9DT0RFLlVOREVDT1JBVEVEX1NUQVRFX0lOX0lWWV06IChuYW1lOiBzdHJpbmcpID0+XG4gICAgYCcke25hbWV9JyBjbGFzcyBzaG91bGQgYmUgZGVjb3JhdGVkIHdpdGggQEluamVjdGFibGUoKSByaWdodCBhZnRlciB0aGUgQFN0YXRlKCkgZGVjb3JhdG9yYFxufTtcbiJdfQ==
{"version":3,"file":"ngxs-router-plugin.js","sources":["../../../../packages/router-plugin/src/router.actions.ts","../../../../packages/router-plugin/src/serializer.ts","../../../../packages/router-plugin/src/router.state.ts","../../../../packages/router-plugin/src/router.module.ts"],"sourcesContent":["import {\n  NavigationCancel,\n  NavigationError,\n  NavigationExtras,\n  Params,\n  RouterStateSnapshot,\n  RoutesRecognized,\n  ResolveEnd\n} from '@angular/router';\n\nimport { RouterTrigger } from './router.state';\n\n/**\n * Public event api of the router\n */\nexport class Navigate {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Router] Navigate';\n  }\n  constructor(\n    public path: any[],\n    public queryParams?: Params,\n    public extras?: NavigationExtras\n  ) {}\n}\n\n/**\n *\n * Angular Routers internal state events\n *\n */\n\n/**\n * An action dispatched when the router navigates.\n */\nexport class RouterNavigation<T = RouterStateSnapshot> {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Router] RouterNavigation';\n  }\n  constructor(\n    public routerState: T,\n    public event: RoutesRecognized,\n    public trigger: RouterTrigger = 'none'\n  ) {}\n}\n\n/**\n * An action dispatched when the router cancel navigation.\n */\nexport class RouterCancel<T, V = RouterStateSnapshot> {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Router] RouterCancel';\n  }\n  constructor(\n    public routerState: V,\n    public storeState: T,\n    public event: NavigationCancel,\n    public trigger: RouterTrigger = 'none'\n  ) {}\n}\n\n/**\n * An action dispatched when the router errors.\n */\nexport class RouterError<T, V = RouterStateSnapshot> {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Router] RouterError';\n  }\n  constructor(\n    public routerState: V,\n    public storeState: T,\n    public event: NavigationError,\n    public trigger: RouterTrigger = 'none'\n  ) {}\n}\n\n/**\n * An action dispatched when the `ResolveEnd` event is triggered.\n */\nexport class RouterDataResolved<T = RouterStateSnapshot> {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Router] RouterDataResolved';\n  }\n  constructor(\n    public routerState: T,\n    public event: ResolveEnd,\n    public trigger: RouterTrigger = 'none'\n  ) {}\n}\n\n/**\n * An union type of router actions.\n */\nexport type RouterAction<T, V = RouterStateSnapshot> =\n  | RouterNavigation<V>\n  | RouterCancel<T, V>\n  | RouterError<T, V>\n  | RouterDataResolved<V>;\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nexport abstract class RouterStateSerializer<T> {\n  abstract serialize(routerState: RouterStateSnapshot): T;\n}\n\nexport interface SerializedRouterStateSnapshot {\n  root: ActivatedRouteSnapshot;\n  url: string;\n}\n\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  private serializeRoute(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      url: route.url,\n      params: route.params,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      data: route.data,\n      outlet: route.outlet,\n      component: null,\n      routeConfig: null,\n      root: null as any,\n      parent: null,\n      firstChild: children[0],\n      children: children,\n      pathFromRoot: null as any,\n      paramMap: route.paramMap,\n      queryParamMap: route.queryParamMap,\n      toString: route.toString\n    };\n  }\n}\n","import { NgZone, Injectable } from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized,\n  ResolveEnd,\n  UrlSerializer,\n  NavigationStart,\n  NavigationEnd\n} from '@angular/router';\nimport { LocationStrategy, Location } from '@angular/common';\nimport { Action, Selector, State, StateContext, Store } from '@ngxs/store';\nimport { isAngularInTestMode } from '@ngxs/store/internals';\nimport { first } from 'rxjs/operators';\n\nimport {\n  Navigate,\n  RouterAction,\n  RouterCancel,\n  RouterError,\n  RouterNavigation,\n  RouterDataResolved\n} from './router.actions';\nimport { RouterStateSerializer } from './serializer';\n\nexport interface RouterStateModel<T = RouterStateSnapshot> {\n  state?: T;\n  navigationId?: number;\n  trigger: RouterTrigger;\n}\n\nexport type RouterTrigger = 'none' | 'router' | 'store';\n\n@State<RouterStateModel>({\n  name: 'router',\n  defaults: {\n    state: undefined,\n    navigationId: undefined,\n    trigger: 'none'\n  }\n})\n@Injectable()\nexport class RouterState {\n  /**\n   * Determines how navigation was performed by the `RouterState` itself\n   * or outside via `new Navigate(...)`\n   */\n  private _trigger: RouterTrigger = 'none';\n\n  /**\n   * That's the serialized state from the `Router` class\n   */\n  private _routerState: RouterStateSnapshot | null = null;\n\n  /**\n   * That's the value of the `RouterState` state\n   */\n  private _storeState: RouterStateModel | null = null;\n\n  private _lastRoutesRecognized: RoutesRecognized = null!;\n\n  @Selector()\n  static state<T = RouterStateSnapshot>(state: RouterStateModel<T>) {\n    return state && state.state;\n  }\n\n  @Selector()\n  static url(state: RouterStateModel): string | undefined {\n    return state && state.state && state.state.url;\n  }\n\n  constructor(\n    private _store: Store,\n    private _router: Router,\n    private _serializer: RouterStateSerializer<RouterStateSnapshot>,\n    private _ngZone: NgZone,\n    private _urlSerializer: UrlSerializer,\n    private _locationStrategy: LocationStrategy,\n    private _location: Location\n  ) {\n    this.setUpStoreListener();\n    this.setUpRouterEventsListener();\n    this.checkInitialNavigationOnce();\n  }\n\n  @Action(Navigate)\n  navigate(_: StateContext<RouterStateModel>, action: Navigate) {\n    return this._ngZone.run(() =>\n      this._router.navigate(action.path, {\n        queryParams: action.queryParams,\n        ...action.extras\n      })\n    );\n  }\n\n  @Action([RouterNavigation, RouterError, RouterCancel, RouterDataResolved])\n  angularRouterAction(\n    ctx: StateContext<RouterStateModel>,\n    action: RouterAction<RouterStateModel, RouterStateSnapshot>\n  ): void {\n    ctx.setState({\n      ...ctx.getState(),\n      trigger: action.trigger,\n      state: action.routerState,\n      navigationId: action.event.id\n    });\n  }\n\n  private setUpStoreListener(): void {\n    this._store.select(RouterState).subscribe((state: RouterStateModel | undefined) => {\n      this.navigateIfNeeded(state);\n    });\n  }\n\n  private setUpRouterEventsListener(): void {\n    this._router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.navigationStart();\n      } else if (event instanceof RoutesRecognized) {\n        this._lastRoutesRecognized = event;\n      } else if (event instanceof ResolveEnd) {\n        this.dispatchRouterDataResolved(event);\n      } else if (event instanceof NavigationCancel) {\n        this.dispatchRouterCancel(event);\n        this.reset();\n      } else if (event instanceof NavigationError) {\n        this.dispatchRouterError(event);\n        this.reset();\n      } else if (event instanceof NavigationEnd) {\n        this.navigationEnd();\n        this.reset();\n      }\n    });\n  }\n\n  private navigationStart(): void {\n    this._routerState = this._serializer.serialize(this._router.routerState.snapshot);\n\n    if (this._trigger !== 'none') {\n      this._storeState = this._store.selectSnapshot(RouterState);\n    }\n  }\n\n  private navigationEnd(): void {\n    if (this.shouldDispatchRouterNavigation()) {\n      this.dispatchRouterNavigation();\n    }\n  }\n\n  private shouldDispatchRouterNavigation(): boolean {\n    if (!this._storeState) return true;\n    return this._trigger !== 'store';\n  }\n\n  private navigateIfNeeded(state: RouterStateModel | undefined): void {\n    const canSkipNavigation =\n      !this._storeState ||\n      !this._storeState.state ||\n      !state ||\n      state.trigger === 'router' ||\n      this._router.url === this._storeState.state.url;\n\n    if (canSkipNavigation) {\n      return;\n    }\n\n    this._trigger = 'store';\n    this._ngZone.run(() => {\n      this._router.navigateByUrl(this._storeState!.state!.url);\n    });\n  }\n\n  private dispatchRouterNavigation(): void {\n    const nextRouterState = this._serializer.serialize(this._lastRoutesRecognized.state);\n\n    this.dispatchRouterAction(\n      new RouterNavigation(\n        nextRouterState,\n        new RoutesRecognized(\n          this._lastRoutesRecognized.id,\n          this._lastRoutesRecognized.url,\n          this._lastRoutesRecognized.urlAfterRedirects,\n          nextRouterState\n        ),\n        this._trigger\n      )\n    );\n  }\n\n  private dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(\n      new RouterCancel(this._routerState!, this._storeState, event, this._trigger)\n    );\n  }\n\n  private dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(\n      new RouterError(\n        this._routerState!,\n        this._storeState,\n        new NavigationError(event.id, event.url, `${event}`),\n        this._trigger\n      )\n    );\n  }\n\n  private dispatchRouterAction<T>(action: RouterAction<T>): void {\n    this._trigger = 'router';\n\n    try {\n      this._store.dispatch(action);\n    } finally {\n      this._trigger = 'none';\n    }\n  }\n\n  private dispatchRouterDataResolved(event: ResolveEnd): void {\n    const routerState = this._serializer.serialize(event.state);\n    this.dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));\n  }\n\n  private reset(): void {\n    this._trigger = 'none';\n    this._storeState = null;\n    this._routerState = null;\n  }\n\n  /**\n   * No sense to mess up the `setUpRouterEventsListener` method as we have\n   * to perform this check only once and unsubscribe after the first event\n   * is triggered\n   */\n  private checkInitialNavigationOnce(): void {\n    if (isAngularInTestMode()) {\n      return;\n    }\n\n    this._router.events\n      .pipe(first((event): event is RoutesRecognized => event instanceof RoutesRecognized))\n      .subscribe(({ url }) => {\n        // `location.pathname` always equals manually entered URL in the address bar\n        // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized\n        // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the\n        // `RouterNavigation` action will be dispatched and the user will be redirected to the\n        // previously saved URL. We want to prevent such behavior, so we perform this check\n\n        // `url` is a recognized URL by the Angular's router, while `currentUrl` is an actual URL\n        // entered in the browser's address bar\n        // `PathLocationStrategy.prototype.path()` returns a concatenation of\n        // `PlatformLocation.pathname` and normalized `PlatformLocation.search`.\n\n        // `Location.prototype.normalize` strips base href from the URL,\n        // if `baseHref` (declared in angular.json) for example is `/en`\n        // and the URL is `/test#anchor` - then `_locationStrategy.path(true)` will return `/en/test#anchor`,\n        // but `/en/test#anchor` is not known to the Angular's router, so we have to strip `/en`\n        // from the URL\n        const currentUrl = this._location.normalize(this._locationStrategy.path(true));\n        const currentUrlTree = this._urlSerializer.parse(currentUrl);\n        // We need to serialize the URL because in that example `/test/?redirect=https://google.com/`\n        // Angular will recognize it as `/test?redirect=https:%2F%2Fwww.google.com%2F`\n        // so we have to run the `currentUrl` via the `UrlSerializer` that will encode characters\n        const currentSerializedUrl = this._urlSerializer.serialize(currentUrlTree);\n\n        // If URLs differ from each other - we've got to perform a redirect to the manually entered URL\n        // in the address bar, as it must have a priority\n        if (currentSerializedUrl !== url) {\n          this._router.navigateByUrl(currentUrl);\n        }\n      });\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\n\nimport { RouterState } from './router.state';\nimport { DefaultRouterStateSerializer, RouterStateSerializer } from './serializer';\n\n@NgModule({\n  imports: [NgxsModule.forFeature([RouterState])]\n})\nexport class NgxsRouterPluginModule {\n  static forRoot(): ModuleWithProviders<NgxsRouterPluginModule> {\n    return {\n      ngModule: NgxsRouterPluginModule,\n      providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
{"version":3,"file":"ngxs-storage-plugin.js","sources":["../../../../packages/storage-plugin/src/symbols.ts","../../../../packages/storage-plugin/src/internals.ts","../../../../packages/storage-plugin/src/storage.plugin.ts","../../../../packages/storage-plugin/src/storage.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { StorageKey } from './internals';\n\nexport const enum StorageOption {\n  LocalStorage,\n  SessionStorage\n}\n\nexport interface NgxsStoragePluginOptions {\n  /**\n   * Key for the state slice to store in the storage engine.\n   */\n  key?: undefined | StorageKey;\n\n  /**\n   * Storage engine to use. Deaults to localStorage but can provide\n   *\n   * sessionStorage or custom implementation of the StorageEngine interface\n   */\n  storage?: StorageOption;\n\n  /**\n   * Migration strategies.\n   */\n  migrations?: {\n    /**\n     * Version to key off.\n     */\n    version: number | string;\n\n    /**\n     * Method to migrate the previous state.\n     */\n    migrate: (state: any) => any;\n\n    /**\n     * Key to migrate.\n     */\n    key?: string;\n\n    /**\n     * Key for the version. Defaults to 'version'.\n     */\n    versionKey?: string;\n  }[];\n\n  /**\n   * Serailizer for the object before its pushed into the engine.\n   */\n  serialize?(obj: any): string;\n\n  /**\n   * Deserializer for the object before its pulled out of the engine.\n   */\n  deserialize?(obj: any): any;\n\n  /**\n   * Method to alter object before serialization.\n   */\n  beforeSerialize?(obj: any, key: string): any;\n\n  /**\n   * Method to alter object after deserialization.\n   */\n  afterDeserialize?(obj: any, key: string): any;\n}\n\nexport const NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('NGXS_STORAGE_PLUGIN_OPTION');\n\nexport const STORAGE_ENGINE = new InjectionToken('STORAGE_ENGINE');\n\nexport interface StorageEngine {\n  readonly length: number;\n  getItem(key: string): any;\n  setItem(key: string, val: any): void;\n  removeItem(key: string): void;\n  clear(): void;\n}\n","import { isPlatformServer } from '@angular/common';\nimport { StateClass } from '@ngxs/store/internals';\nimport { StateToken } from '@ngxs/store';\n\nimport { StorageOption, StorageEngine, NgxsStoragePluginOptions } from './symbols';\n\n/**\n * If the `key` option is not provided then the below constant\n * will be used as a default key\n */\nexport const DEFAULT_STATE_KEY = '@@STATE';\n\n/**\n * Internal type definition for the `key` option provided\n * in the `forRoot` method when importing module\n */\nexport type StorageKey =\n  | string\n  | StateClass\n  | StateToken<any>\n  | (string | StateClass | StateToken<any>)[];\n\n/**\n * This key is used to retrieve static metadatas on state classes.\n * This constant is taken from the core codebase\n */\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\n\nfunction transformKeyOption(key: StorageKey): string[] {\n  if (!Array.isArray(key)) {\n    key = [key];\n  }\n\n  return key.map((token: string | StateClass | StateToken<any>) => {\n    if (typeof token === 'string') {\n      return token;\n    } else if (token instanceof StateToken) {\n      return token.getName();\n    }\n\n    const options = (token as any)[META_OPTIONS_KEY];\n    return options.name;\n  });\n}\n\nexport function storageOptionsFactory(\n  options: NgxsStoragePluginOptions | undefined\n): NgxsStoragePluginOptions {\n  if (options !== undefined && options.key) {\n    options.key = transformKeyOption(options.key);\n  }\n\n  return {\n    key: [DEFAULT_STATE_KEY],\n    storage: StorageOption.LocalStorage,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    beforeSerialize: obj => obj,\n    afterDeserialize: obj => obj,\n    ...options\n  };\n}\n\nexport function engineFactory(\n  options: NgxsStoragePluginOptions,\n  platformId: string\n): StorageEngine | null {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n\n  if (options.storage === StorageOption.LocalStorage) {\n    return localStorage;\n  } else if (options.storage === StorageOption.SessionStorage) {\n    return sessionStorage;\n  }\n\n  return null;\n}\n","import { PLATFORM_ID, Inject, Injectable } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport {\n  NgxsPlugin,\n  setValue,\n  getValue,\n  InitState,\n  UpdateState,\n  actionMatcher,\n  NgxsNextPluginFn\n} from '@ngxs/store';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  StorageEngine,\n  NgxsStoragePluginOptions,\n  STORAGE_ENGINE,\n  NGXS_STORAGE_PLUGIN_OPTIONS\n} from './symbols';\nimport { DEFAULT_STATE_KEY } from './internals';\n\n@Injectable()\nexport class NgxsStoragePlugin implements NgxsPlugin {\n  constructor(\n    @Inject(NGXS_STORAGE_PLUGIN_OPTIONS) private _options: NgxsStoragePluginOptions,\n    @Inject(STORAGE_ENGINE) private _engine: StorageEngine,\n    @Inject(PLATFORM_ID) private _platformId: string\n  ) {}\n\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\n    if (isPlatformServer(this._platformId) && this._engine === null) {\n      return next(state, event);\n    }\n\n    // We cast to `string[]` here as we're sure that this option has been\n    // transformed by the `storageOptionsFactory` function that provided token\n    const keys = this._options.key as string[];\n    const matches = actionMatcher(event);\n    const isInitAction = matches(InitState) || matches(UpdateState);\n    let hasMigration = false;\n\n    if (isInitAction) {\n      for (const key of keys) {\n        const isMaster = key === DEFAULT_STATE_KEY;\n        let val: any = this._engine.getItem(key!);\n\n        if (val !== 'undefined' && typeof val !== 'undefined' && val !== null) {\n          try {\n            const newVal = this._options.deserialize!(val);\n            val = this._options.afterDeserialize!(newVal, key);\n          } catch (e) {\n            console.error(\n              'Error ocurred while deserializing the store value, falling back to empty object.'\n            );\n            val = {};\n          }\n\n          if (this._options.migrations) {\n            this._options.migrations.forEach(strategy => {\n              const versionMatch =\n                strategy.version === getValue(val, strategy.versionKey || 'version');\n              const keyMatch = (!strategy.key && isMaster) || strategy.key === key;\n              if (versionMatch && keyMatch) {\n                val = strategy.migrate(val);\n                hasMigration = true;\n              }\n            });\n          }\n\n          if (!isMaster) {\n            state = setValue(state, key!, val);\n          } else {\n            state = { ...state, ...val };\n          }\n        }\n      }\n    }\n\n    return next(state, event).pipe(\n      tap(nextState => {\n        if (!isInitAction || (isInitAction && hasMigration)) {\n          for (const key of keys) {\n            let val = nextState;\n\n            if (key !== DEFAULT_STATE_KEY) {\n              val = getValue(nextState, key!);\n            }\n\n            try {\n              const newVal = this._options.beforeSerialize!(val, key);\n              this._engine.setItem(key!, this._options.serialize!(newVal));\n            } catch (e) {\n              console.error(\n                'Error ocurred while serializing the store value, value not updated.'\n              );\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\n\nimport {\n  NgxsStoragePluginOptions,\n  STORAGE_ENGINE,\n  NGXS_STORAGE_PLUGIN_OPTIONS\n} from './symbols';\nimport { NgxsStoragePlugin } from './storage.plugin';\nimport { storageOptionsFactory, engineFactory } from './internals';\n\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\n\n@NgModule()\nexport class NgxsStoragePluginModule {\n  static forRoot(\n    options?: NgxsStoragePluginOptions\n  ): ModuleWithProviders<NgxsStoragePluginModule> {\n    return {\n      ngModule: NgxsStoragePluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsStoragePlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_STORAGE_PLUGIN_OPTIONS,\n          useFactory: storageOptionsFactory,\n          deps: [USER_OPTIONS]\n        },\n        {\n          provide: STORAGE_ENGINE,\n          useFactory: engineFactory,\n          deps: [NGXS_STORAGE_PLUGIN_OPTIONS, PLATFORM_ID]\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
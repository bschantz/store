{"version":3,"sources":["../../../../packages/devtools-plugin/src/symbols.ts","../../../../packages/devtools-plugin/src/devtools.plugin.ts","../../../../packages/devtools-plugin/src/devtools.module.ts"],"names":["NGXS_DEVTOOLS_OPTIONS","InjectionToken","NgxsReduxDevtoolsPlugin","_options","_injector","_this","this","devtoolsExtension","windowObj","window","globalDevtools","connect","subscribe","a","dispatched","Object","defineProperty","prototype","get","Store","handle","state","action","next","isDisabled","disabled","pipe","catchError","error","newState","store","snapshot","sendToDevTools","tap","type","getActionTypeFromInstance","init","send","assign","payload","prevState","JSON","parse","reset","console","warn","_a","nextLiftedState","actionsById_1","actionsById","computedStates_1","computedStates","currentStateIndex","keys","filter","actionId","forEach","actionPayload","dispatch","devtoolsOptionsFactory","options","name","Injectable","Inject","args","Injector","USER_OPTIONS","NgxsReduxDevtoolsPluginModule","forRoot","ngModule","providers","provide","NGXS_PLUGINS","useClass","multi","useValue","useFactory","deps","NgModule"],"mappings":"ydA+CaA,EAAwB,IAAIC,EAAAA,eAAe,sCC3BtD,SAAAC,EACyCC,EAC/BC,GAFV,IAAAC,EAAAC,KACyCA,KAAAH,SAAAA,EAC/BG,KAAAF,UAAAA,EALOE,KAAAC,kBAAkD,KAClDD,KAAAE,UAAmC,oBAAXC,OAAyBA,OAAS,OAMnEC,EACJJ,KAAKE,UAAwC,8BAAKF,KAAKE,UAA6B,kBAClFE,IACFJ,KAAKC,kBAAoBG,EAAeC,QAAQR,GAChDG,KAAKC,kBAAkBK,WAAS,SAACC,GAAK,OAAAR,EAAKS,WAAWD,cAO1DE,OAAAC,eAAYd,EAAAe,UAAA,QAAK,KAAjB,WACE,OAAOX,KAAKF,UAAUc,IAAWC,EAAAA,wCAMnCjB,EAAAe,UAAAG,OAAA,SAAOC,EAAYC,EAAaC,GAAhC,IAAAlB,EAAAC,KACQkB,EAAalB,KAAKH,UAAYG,KAAKH,SAASsB,SAClD,OAAKnB,KAAKC,mBAAqBiB,EACtBD,EAAKF,EAAOC,GAGdC,EAAKF,EAAOC,GAAQI,KACzBC,EAAAA,YAAU,SAACC,OACHC,EAAWxB,EAAKyB,MAAMC,WAE5B,MADA1B,EAAK2B,eAAeX,EAAOC,EAAQO,GAC7BD,KAERK,EAAAA,KAAG,SAACJ,GACFxB,EAAK2B,eAAeX,EAAOC,EAAQO,QAKjC3B,EAAAe,UAAAe,eAAA,SAAeX,EAAYC,EAAaO,OACxCK,EAAOC,EAAAA,0BAA0Bb,GAET,WAATY,EAEnB5B,KAAsB,kBAAE8B,KAAKf,GAE7Bf,KAAsB,kBAAE+B,KAAItB,OAAAuB,OAAAvB,OAAAuB,OAAA,GAAMhB,GAAM,CAAEA,OAAQ,KAAMY,KAAIA,IAAIL,IAOpE3B,EAAAe,UAAAH,WAAA,SAAWQ,GAAX,IAAAjB,EAAAC,KACE,GAAoB,aAAhBgB,EAAOY,MACT,GAC0B,mBAAxBZ,EAAOiB,QAAQL,MACS,kBAAxBZ,EAAOiB,QAAQL,KACf,KACMM,EAAYC,KAAKC,MAAMpB,EAAOD,OACpCf,KAAKwB,MAAMa,MAAMH,QACZ,GAA4B,kBAAxBlB,EAAOiB,QAAQL,KACxBU,QAAQC,KAAK,4CACR,GAA4B,iBAAxBvB,EAAOiB,QAAQL,KAAyB,CAC3C,IAAAY,EAIFxB,EAAOiB,QAAQQ,gBAHjBC,EAAWF,EAAAG,YACXC,EAAcJ,EAAAK,eACdC,EAAiBN,EAAAM,kBAEnB9C,KAAsB,kBAAE8B,KAAKc,EAAe,GAAG7B,OAC/CN,OAAOsC,KAAKL,GACTM,QAAM,SAACC,GAAY,MAAa,MAAbA,KACnBC,SAAO,SAACD,GACP,OAAAlD,EAAsB,kBAAEgC,KAAKW,EAAYO,GAAWL,EAAeK,GAAUlC,UAEjFf,KAAKwB,MAAMa,MAAMO,EAAeE,GAAmB/B,aAEhD,GAAoB,WAAhBC,EAAOY,KAAmB,KAC7BuB,EAAgBhB,KAAKC,MAAMpB,EAAOiB,SACxCjC,KAAKwB,MAAM4B,SAASD,mBC9FVE,EAAuBC,GACrC,OAAA7C,OAAAuB,OAAA,CACEuB,KAAM,QACHD,uBDMNE,EAAAA,+EAMIC,EAAAA,OAAMC,KAAA,CAAChE,YArBiBiE,EAAAA,gBCahBC,EAAe,IAAIjE,EAAAA,eAAe,6BAG/C,SAAAkE,YACSA,EAAAC,QAAP,SACER,GAEA,MAAO,CACLS,SAAUF,EACVG,UAAW,CACT,CACEC,QAASC,EAAAA,aACTC,SAAUvE,EACVwE,OAAO,GAET,CACEH,QAASL,EACTS,SAAUf,GAEZ,CACEW,QAASvE,EACT4E,WAAYjB,EACZkB,KAAM,CAACX,gCApBhBY,EAAAA","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\n/**\n * Interface for the redux-devtools-extension API.\n */\nexport interface NgxsDevtoolsExtension {\n  init(state: any): void;\n  send(action: any, state?: any): void;\n  subscribe(fn: (message: NgxsDevtoolsAction) => void): Subscription;\n}\n\nexport interface NgxsDevtoolsAction {\n  type: string;\n  payload: any;\n  state: any;\n  id: number;\n  source: string;\n}\n\nexport interface NgxsDevtoolsOptions {\n  /**\n   * The name of the extension\n   */\n  name?: string;\n\n  /**\n   * Whether the dev tools is enabled or note. Useful for setting during production.\n   */\n  disabled?: boolean;\n\n  /**\n   * Max number of entiries to keep.\n   */\n  maxAge?: number;\n\n  /**\n   * Reformat actions before sending to dev tools\n   */\n  actionSanitizer?: (action: any) => void;\n\n  /**\n   * Reformat state before sending to devtools\n   */\n  stateSanitizer?: (state: any) => void;\n}\n\nexport const NGXS_DEVTOOLS_OPTIONS = new InjectionToken('NGXS_DEVTOOLS_OPTIONS');\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { getActionTypeFromInstance, NgxsNextPluginFn, NgxsPlugin, Store } from '@ngxs/store';\nimport { tap, catchError } from 'rxjs/operators';\n\nimport {\n  NGXS_DEVTOOLS_OPTIONS,\n  NgxsDevtoolsAction,\n  NgxsDevtoolsExtension,\n  NgxsDevtoolsOptions\n} from './symbols';\n\n/**\n * Adds support for the Redux Devtools extension:\n * http://extension.remotedev.io/\n */\n@Injectable()\nexport class NgxsReduxDevtoolsPlugin implements NgxsPlugin {\n  private readonly devtoolsExtension: NgxsDevtoolsExtension | null = null;\n  private readonly windowObj: any = typeof window !== 'undefined' ? window : {};\n\n  constructor(\n    @Inject(NGXS_DEVTOOLS_OPTIONS) private _options: NgxsDevtoolsOptions,\n    private _injector: Injector\n  ) {\n    const globalDevtools =\n      this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];\n    if (globalDevtools) {\n      this.devtoolsExtension = globalDevtools.connect(_options) as NgxsDevtoolsExtension;\n      this.devtoolsExtension.subscribe(a => this.dispatched(a));\n    }\n  }\n\n  /**\n   * Lazy get the store for circular dependency issues\n   */\n  private get store(): Store {\n    return this._injector.get<Store>(Store);\n  }\n\n  /**\n   * Middleware handle function\n   */\n  handle(state: any, action: any, next: NgxsNextPluginFn) {\n    const isDisabled = this._options && this._options.disabled;\n    if (!this.devtoolsExtension || isDisabled) {\n      return next(state, action);\n    }\n\n    return next(state, action).pipe(\n      catchError(error => {\n        const newState = this.store.snapshot();\n        this.sendToDevTools(state, action, newState);\n        throw error;\n      }),\n      tap(newState => {\n        this.sendToDevTools(state, action, newState);\n      })\n    );\n  }\n\n  private sendToDevTools(state: any, action: any, newState: any) {\n    const type = getActionTypeFromInstance(action);\n    // if init action, send initial state to dev tools\n    const isInitAction = type === '@@INIT';\n    if (isInitAction) {\n      this.devtoolsExtension!.init(state);\n    } else {\n      this.devtoolsExtension!.send({ ...action, action: null, type }, newState);\n    }\n  }\n\n  /**\n   * Handle the action from the dev tools subscription\n   */\n  dispatched(action: NgxsDevtoolsAction) {\n    if (action.type === 'DISPATCH') {\n      if (\n        action.payload.type === 'JUMP_TO_ACTION' ||\n        action.payload.type === 'JUMP_TO_STATE'\n      ) {\n        const prevState = JSON.parse(action.state);\n        this.store.reset(prevState);\n      } else if (action.payload.type === 'TOGGLE_ACTION') {\n        console.warn('Skip is not supported at this time.');\n      } else if (action.payload.type === 'IMPORT_STATE') {\n        const {\n          actionsById,\n          computedStates,\n          currentStateIndex\n        } = action.payload.nextLiftedState;\n        this.devtoolsExtension!.init(computedStates[0].state);\n        Object.keys(actionsById)\n          .filter(actionId => actionId !== '0')\n          .forEach(actionId =>\n            this.devtoolsExtension!.send(actionsById[actionId], computedStates[actionId].state)\n          );\n        this.store.reset(computedStates[currentStateIndex].state);\n      }\n    } else if (action.type === 'ACTION') {\n      const actionPayload = JSON.parse(action.payload);\n      this.store.dispatch(actionPayload);\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\n\nimport { NgxsDevtoolsOptions, NGXS_DEVTOOLS_OPTIONS } from './symbols';\nimport { NgxsReduxDevtoolsPlugin } from './devtools.plugin';\n\nexport function devtoolsOptionsFactory(options: NgxsDevtoolsOptions) {\n  return {\n    name: 'NGXS',\n    ...options\n  };\n}\n\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\n\n@NgModule()\nexport class NgxsReduxDevtoolsPluginModule {\n  static forRoot(\n    options?: NgxsDevtoolsOptions\n  ): ModuleWithProviders<NgxsReduxDevtoolsPluginModule> {\n    return {\n      ngModule: NgxsReduxDevtoolsPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsReduxDevtoolsPlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_DEVTOOLS_OPTIONS,\n          useFactory: devtoolsOptionsFactory,\n          deps: [USER_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n"]}
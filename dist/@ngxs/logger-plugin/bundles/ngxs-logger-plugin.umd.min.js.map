{"version":3,"sources":["../../../../packages/logger-plugin/src/internals.ts","../../../../packages/logger-plugin/src/action-logger.ts","../../../../packages/logger-plugin/src/log-writer.ts","../../../../packages/logger-plugin/src/symbols.ts","../../../../packages/logger-plugin/src/logger.plugin.ts","../../../../packages/logger-plugin/src/logger.module.ts"],"names":["pad","num","maxLength","str","times","toString","length","Array","join","ActionLogger","action","store","logWriter","this","prototype","dispatched","state","time","message","getActionTypeFromInstance","Date","getHours","getMinutes","getSeconds","getMilliseconds","startGroup","_hasPayload","logGrey","Object","assign","completed","nextState","logGreen","endGroup","errored","error","logRedish","snapshot","event","_getNonEmptyProperties","keys","map","key","filter","value","undefined","LogWriter","options","logger","console","startGroupFn","collapsed","groupCollapsed","group","call","e","log","groupEnd","title","payload","color","isIE","ua","window","navigator","userAgent","msIE","oldIE","indexOf","newIE","NGXS_LOGGER_PLUGIN_OPTIONS","InjectionToken","NgxsLoggerPlugin","_options","_injector","handle","next","disabled","_logWriter","_store","get","Store","actionLogger","pipe","tap","catchError","Injectable","Inject","args","Injector","USER_OPTIONS","loggerOptionsFactory","defaultLoggerOptions","NgxsLoggerPluginModule","forRoot","ngModule","providers","provide","NGXS_PLUGINS","useClass","multi","useValue","useFactory","deps","NgModule"],"mappings":"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","sourcesContent":["export const repeat = (str: string, times: number) => new Array(times + 1).join(str);\n\nexport const pad = (num: number, maxLength: number) =>\n  repeat('0', maxLength - num.toString().length) + num;\n\nexport function formatTime(time: Date) {\n  return (\n    pad(time.getHours(), 2) +\n    `:` +\n    pad(time.getMinutes(), 2) +\n    `:` +\n    pad(time.getSeconds(), 2) +\n    `.` +\n    pad(time.getMilliseconds(), 3)\n  );\n}\n","import { getActionTypeFromInstance, Store } from '@ngxs/store';\n\nimport { formatTime } from './internals';\nimport { LogWriter } from './log-writer';\n\nexport class ActionLogger {\n  constructor(private action: any, private store: Store, private logWriter: LogWriter) {}\n\n  dispatched(state: any) {\n    const actionName = getActionTypeFromInstance(this.action);\n    const formattedTime = formatTime(new Date());\n\n    const message = `action ${actionName} @ ${formattedTime}`;\n    this.logWriter.startGroup(message);\n\n    // print payload only if at least one property is supplied\n    if (this._hasPayload(this.action)) {\n      this.logWriter.logGrey('payload', { ...this.action });\n    }\n\n    this.logWriter.logGrey('prev state', state);\n  }\n\n  completed(nextState: any) {\n    this.logWriter.logGreen('next state', nextState);\n    this.logWriter.endGroup();\n  }\n\n  errored(error: any) {\n    this.logWriter.logRedish('next state after error', this.store.snapshot());\n    this.logWriter.logRedish('error', error);\n    this.logWriter.endGroup();\n  }\n\n  private _hasPayload(event: any) {\n    const nonEmptyProperties = this._getNonEmptyProperties(event);\n    return nonEmptyProperties.length > 0;\n  }\n\n  private _getNonEmptyProperties(event: any) {\n    const keys = Object.keys(event);\n    const values = keys.map(key => event[key]);\n    return values.filter(value => value !== undefined);\n  }\n}\n","import { NgxsLoggerPluginOptions } from './symbols';\nexport class LogWriter {\n  private logger: any;\n\n  constructor(private options: NgxsLoggerPluginOptions) {\n    this.options = this.options || <any>{};\n    this.logger = options.logger || console;\n  }\n\n  startGroup(message: string) {\n    const startGroupFn = this.options.collapsed\n      ? this.logger.groupCollapsed\n      : this.logger.group;\n    try {\n      startGroupFn.call(this.logger, message);\n    } catch (e) {\n      console.log(message);\n    }\n  }\n\n  endGroup() {\n    try {\n      this.logger.groupEnd();\n    } catch (e) {\n      this.logger.log('—— log end ——');\n    }\n  }\n\n  logGrey(title: string, payload: any) {\n    const greyStyle = 'color: #9E9E9E; font-weight: bold';\n    this.log(title, greyStyle, payload);\n  }\n\n  logGreen(title: string, payload: any) {\n    const greenStyle = 'color: #4CAF50; font-weight: bold';\n    this.log(title, greenStyle, payload);\n  }\n\n  logRedish(title: string, payload: any) {\n    const redishStyle = 'color: #FD8182; font-weight: bold';\n    this.log(title, redishStyle, payload);\n  }\n\n  log(title: string, color: string, payload: any) {\n    if (this.isIE()) {\n      this.logger.log(title, payload);\n    } else {\n      this.logger.log('%c ' + title, color, payload);\n    }\n  }\n\n  isIE(): boolean {\n    const ua =\n      typeof window !== 'undefined' && window.navigator.userAgent\n        ? window.navigator.userAgent\n        : '';\n    let msIE = false;\n    const oldIE = ua.indexOf('MSIE ');\n    const newIE = ua.indexOf('Trident/');\n    if (oldIE > -1 || newIE > -1) {\n      msIE = true;\n    }\n    return msIE;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface NgxsLoggerPluginOptions {\n  /** Auto expand logged actions  */\n  collapsed?: boolean;\n\n  /** Provide alternate console.log implementation */\n  logger?: any;\n\n  /** Disable the logger. Useful for prod mode. */\n  disabled?: boolean;\n\n  /** Predicate for actions to be the logged. Takes action and state snapshot as parameters */\n  filter?: (action: any, state: any) => boolean;\n}\n\nexport const NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { NgxsNextPluginFn, NgxsPlugin, Store } from '@ngxs/store';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ActionLogger } from './action-logger';\nimport { LogWriter } from './log-writer';\nimport { NgxsLoggerPluginOptions, NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';\n\n@Injectable()\nexport class NgxsLoggerPlugin implements NgxsPlugin {\n  private _store: Store;\n  private _logWriter: LogWriter;\n\n  constructor(\n    @Inject(NGXS_LOGGER_PLUGIN_OPTIONS) private _options: NgxsLoggerPluginOptions,\n    private _injector: Injector\n  ) {}\n\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\n    if (this._options.disabled || !this._options.filter!(event, state)) {\n      return next(state, event);\n    }\n\n    this._logWriter = this._logWriter || new LogWriter(this._options);\n    // Retrieve lazily to avoid cyclic dependency exception\n    this._store = this._store || this._injector.get<Store>(Store);\n\n    const actionLogger = new ActionLogger(event, this._store, this._logWriter);\n\n    actionLogger.dispatched(state);\n\n    return next(state, event).pipe(\n      tap(nextState => {\n        actionLogger.completed(nextState);\n      }),\n      catchError(error => {\n        actionLogger.errored(error);\n        throw error;\n      })\n    );\n  }\n}\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsLoggerPlugin } from './logger.plugin';\nimport { NgxsLoggerPluginOptions, NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';\n\nexport const USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');\n\nexport function loggerOptionsFactory(options: NgxsLoggerPluginOptions) {\n  const defaultLoggerOptions: NgxsLoggerPluginOptions = {\n    logger: console,\n    collapsed: false,\n    disabled: false,\n    filter: () => true\n  };\n\n  return {\n    ...defaultLoggerOptions,\n    ...options\n  };\n}\n\n@NgModule()\nexport class NgxsLoggerPluginModule {\n  static forRoot(\n    options?: NgxsLoggerPluginOptions\n  ): ModuleWithProviders<NgxsLoggerPluginModule> {\n    return {\n      ngModule: NgxsLoggerPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsLoggerPlugin,\n          multi: true\n        },\n        {\n          provide: USER_OPTIONS,\n          useValue: options\n        },\n        {\n          provide: NGXS_LOGGER_PLUGIN_OPTIONS,\n          useFactory: loggerOptionsFactory,\n          deps: [USER_OPTIONS]\n        }\n      ]\n    };\n  }\n}\n"]}
{"version":3,"sources":["../../../../packages/form-plugin/src/actions.ts","../../../../packages/form-plugin/src/form.plugin.ts","../../../../packages/form-plugin/src/directive.ts","../../../../packages/form-plugin/src/form.module.ts"],"names":["UpdateFormStatus","payload","this","Object","defineProperty","UpdateFormValue","UpdateForm","UpdateFormDirty","SetFormDirty","SetFormPristine","UpdateFormErrors","SetFormDisabled","SetFormEnabled","ResetForm","NgxsFormPlugin","prototype","handle","state","event","next","type","getActionTypeFromInstance","nextState","value","payloadValue","Array","isArray","slice","assign","path","joinPathWithPropertyPath","setValue","model","getValue","status","errors","dirty","_a","propertyPath","Injectable","FormDirective","_actions$","_store","_formGroupDirective","_cd","debounce","clearDestroy","_destroy$","Subject","_updating","ngOnInit","_this","pipe","ofActionDispatched","filter","action","takeUntil","subscribe","form","reset","updateFormStateWithRawValue","markForCheck","getStateStream","patchValue","markAsDirty","markAsPristine","selectOnce","dispatch","getRawValue","disabled","disable","enable","debounceChange","distinctUntilChanged","withFormStatus","control","actions","push","error","complete","ngOnDestroy","updateOn","change","debounceTime","select","Directive","args","selector","Actions","Store","FormGroupDirective","ChangeDetectorRef","Input","NgxsFormPluginModule","forRoot","ngModule","providers","provide","NGXS_PLUGINS","useClass","multi","NgModule","imports","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["export class UpdateFormStatus {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Update Form Status';\n  }\n  constructor(\n    public payload: {\n      status: string | null;\n      path: string;\n    }\n  ) {}\n}\n\nexport class UpdateFormValue {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Update Form Value';\n  }\n  constructor(public payload: { value: any; path: string; propertyPath?: string }) {}\n}\n\nexport class UpdateForm {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Update Form';\n  }\n  constructor(\n    public payload: {\n      value: any;\n      errors: { [k: string]: string } | null;\n      dirty: boolean | null;\n      status: string | null;\n      path: string;\n    }\n  ) {}\n}\n\nexport class UpdateFormDirty {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Update Form Dirty';\n  }\n  constructor(public payload: { dirty: boolean | null; path: string }) {}\n}\n\nexport class SetFormDirty {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Set Form Dirty';\n  }\n  constructor(public payload: string) {}\n}\n\nexport class SetFormPristine {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Set Form Pristine';\n  }\n  constructor(public payload: string) {}\n}\n\nexport class UpdateFormErrors {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Update Form Errors';\n  }\n  constructor(public payload: { errors: { [k: string]: string } | null; path: string }) {}\n}\n\nexport class SetFormDisabled {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Set Form Disabled';\n  }\n  constructor(public payload: string) {}\n}\n\nexport class SetFormEnabled {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Set Form Enabled';\n  }\n  constructor(public payload: string) {}\n}\n\nexport class ResetForm {\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '[Forms] Reset Form';\n  }\n  constructor(public payload: { path: string; value?: any }) {}\n}\n","import { Injectable } from '@angular/core';\nimport {\n  getActionTypeFromInstance,\n  getValue,\n  NgxsNextPluginFn,\n  NgxsPlugin,\n  setValue\n} from '@ngxs/store';\nimport {\n  ResetForm,\n  SetFormDirty,\n  SetFormDisabled,\n  SetFormEnabled,\n  SetFormPristine,\n  UpdateForm,\n  UpdateFormDirty,\n  UpdateFormErrors,\n  UpdateFormStatus,\n  UpdateFormValue\n} from './actions';\n\n@Injectable()\nexport class NgxsFormPlugin implements NgxsPlugin {\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\n    const type = getActionTypeFromInstance(event);\n\n    let nextState = state;\n\n    if (type === UpdateFormValue.type || type === UpdateForm.type || type === ResetForm.type) {\n      const { value } = event.payload;\n      const payloadValue = Array.isArray(value) ? value.slice() : { ...value };\n      const path = this.joinPathWithPropertyPath(event);\n      nextState = setValue(nextState, path, payloadValue);\n    }\n\n    if (type === ResetForm.type) {\n      const model = getValue(nextState, `${event.payload.path}.model`);\n      nextState = setValue(nextState, `${event.payload.path}`, { model: model });\n    }\n\n    if (type === UpdateFormStatus.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.status`, event.payload.status);\n    }\n\n    if (type === UpdateFormErrors.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.errors`, {\n        ...event.payload.errors\n      });\n    }\n\n    if (type === UpdateFormDirty.type || type === UpdateForm.type) {\n      nextState = setValue(nextState, `${event.payload.path}.dirty`, event.payload.dirty);\n    }\n\n    if (type === SetFormDirty.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, true);\n    }\n\n    if (type === SetFormPristine.type) {\n      nextState = setValue(nextState, `${event.payload}.dirty`, false);\n    }\n\n    if (type === SetFormDisabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, true);\n    }\n\n    if (type === SetFormEnabled.type) {\n      nextState = setValue(nextState, `${event.payload}.disabled`, false);\n    }\n\n    return next(nextState, event);\n  }\n\n  private joinPathWithPropertyPath({ payload }: UpdateFormValue): string {\n    let path = `${payload.path}.model`;\n\n    if (payload.propertyPath) {\n      path += `.${payload.propertyPath}`;\n    }\n\n    return path;\n  }\n}\n","import { ChangeDetectorRef, Directive, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup, FormGroupDirective } from '@angular/forms';\nimport { Actions, getValue, ofActionDispatched, Store } from '@ngxs/store';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport {\n  ResetForm,\n  UpdateForm,\n  UpdateFormDirty,\n  UpdateFormErrors,\n  UpdateFormStatus,\n  UpdateFormValue\n} from './actions';\n\n@Directive({ selector: '[ngxsForm]' })\nexport class FormDirective implements OnInit, OnDestroy {\n  @Input('ngxsForm')\n  path: string = null!;\n\n  @Input('ngxsFormDebounce')\n  debounce = 100;\n\n  @Input('ngxsFormClearOnDestroy')\n  clearDestroy = false;\n\n  private readonly _destroy$ = new Subject<void>();\n  private _updating = false;\n\n  constructor(\n    private _actions$: Actions,\n    private _store: Store,\n    private _formGroupDirective: FormGroupDirective,\n    private _cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this._actions$\n      .pipe(\n        ofActionDispatched(ResetForm),\n        filter((action: ResetForm) => action.payload.path === this.path),\n        takeUntil(this._destroy$)\n      )\n      .subscribe(({ payload: { value } }: ResetForm) => {\n        this.form.reset(value);\n        this.updateFormStateWithRawValue(true);\n        this._cd.markForCheck();\n      });\n\n    this.getStateStream(`${this.path}.model`).subscribe(model => {\n      if (this._updating || !model) {\n        return;\n      }\n\n      this.form.patchValue(model);\n      this._cd.markForCheck();\n    });\n\n    this.getStateStream(`${this.path}.dirty`).subscribe(dirty => {\n      if (this.form.dirty === dirty || typeof dirty !== 'boolean') {\n        return;\n      }\n\n      if (dirty) {\n        this.form.markAsDirty();\n      } else {\n        this.form.markAsPristine();\n      }\n\n      this._cd.markForCheck();\n    });\n\n    // On first state change, sync form model, status and dirty with state\n    this._store\n      .selectOnce(state => getValue(state, this.path))\n      .subscribe(() => {\n        this._store.dispatch([\n          new UpdateFormValue({\n            path: this.path,\n            value: this.form.getRawValue()\n          }),\n          new UpdateFormStatus({\n            path: this.path,\n            status: this.form.status\n          }),\n          new UpdateFormDirty({\n            path: this.path,\n            dirty: this.form.dirty\n          })\n        ]);\n      });\n\n    this.getStateStream(`${this.path}.disabled`).subscribe(disabled => {\n      if (this.form.disabled === disabled || typeof disabled !== 'boolean') {\n        return;\n      }\n\n      if (disabled) {\n        this.form.disable();\n      } else {\n        this.form.enable();\n      }\n\n      this._cd.markForCheck();\n    });\n\n    this._formGroupDirective.valueChanges!.pipe(this.debounceChange()).subscribe(() => {\n      this.updateFormStateWithRawValue();\n    });\n\n    this._formGroupDirective\n      .statusChanges!.pipe(distinctUntilChanged(), this.debounceChange())\n      .subscribe((status: string) => {\n        this._store.dispatch(\n          new UpdateFormStatus({\n            status,\n            path: this.path\n          })\n        );\n      });\n  }\n\n  updateFormStateWithRawValue(withFormStatus?: boolean) {\n    if (this._updating) return;\n\n    const value = this._formGroupDirective.control.getRawValue();\n\n    const actions: any[] = [\n      new UpdateFormValue({\n        path: this.path,\n        value\n      }),\n      new UpdateFormDirty({\n        path: this.path,\n        dirty: this._formGroupDirective.dirty\n      }),\n      new UpdateFormErrors({\n        path: this.path,\n        errors: this._formGroupDirective.errors\n      })\n    ];\n\n    if (withFormStatus) {\n      actions.push(\n        new UpdateFormStatus({\n          path: this.path,\n          status: this._formGroupDirective.status\n        })\n      );\n    }\n\n    this._updating = true;\n    this._store.dispatch(actions).subscribe({\n      error: () => (this._updating = false),\n      complete: () => (this._updating = false)\n    });\n  }\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n\n    if (this.clearDestroy) {\n      this._store.dispatch(\n        new UpdateForm({\n          path: this.path,\n          value: null,\n          dirty: null,\n          status: null,\n          errors: null\n        })\n      );\n    }\n  }\n\n  private debounceChange() {\n    const skipDebounceTime =\n      this._formGroupDirective.control.updateOn !== 'change' || this.debounce < 0;\n\n    return skipDebounceTime\n      ? (change: Observable<any>) => change.pipe(takeUntil(this._destroy$))\n      : (change: Observable<any>) =>\n          change.pipe(debounceTime(this.debounce), takeUntil(this._destroy$));\n  }\n\n  private get form(): FormGroup {\n    return this._formGroupDirective.form;\n  }\n\n  private getStateStream(path: string) {\n    return this._store.select(state => getValue(state, path)).pipe(takeUntil(this._destroy$));\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NGXS_PLUGINS } from '@ngxs/store';\nimport { NgxsFormPlugin } from './form.plugin';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormDirective } from './directive';\n\n@NgModule({\n  imports: [ReactiveFormsModule],\n  declarations: [FormDirective],\n  exports: [FormDirective]\n})\nexport class NgxsFormPluginModule {\n  static forRoot(): ModuleWithProviders<NgxsFormPluginModule> {\n    return {\n      ngModule: NgxsFormPluginModule,\n      providers: [\n        {\n          provide: NGXS_PLUGINS,\n          useClass: NgxsFormPlugin,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"]}